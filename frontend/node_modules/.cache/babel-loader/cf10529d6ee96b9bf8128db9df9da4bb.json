{"ast":null,"code":"import defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\";\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\n\nexport function extendTheme(overrides, baseTheme) {\n  if (baseTheme === void 0) {\n    baseTheme = defaultTheme;\n  }\n\n  function customizer(source, override, key, object) {\n    if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n      return function () {\n        var sourceValue = isFunction(source) ? source.apply(void 0, arguments) : source;\n        var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    } // fallback to default behaviour\n\n\n    return undefined;\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer);\n}","map":{"version":3,"sources":["../../src/extend-theme.ts"],"names":["baseTheme","defaultTheme","isFunction","Object","sourceValue","source","overrideValue","override","mergeWith"],"mappings":"AAAA,OAAA,YAAA,MAAA,kBAAA;AACA,SAAA,UAAA,EAAA,SAAA,QAAA,kBAAA;AAyBA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,WAAA,CAAA,SAAA,EAAA,SAAA,EAMkB;AAAA,MADvBA,SACuB,KAAA,KAAA,CAAA,EAAA;AADvBA,IAAAA,SACuB,GADCC,YAAxBD;AACuB;;AACvB,WAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAKE;AACA,QACE,CAACE,UAAU,CAAVA,MAAU,CAAVA,IAAsBA,UAAU,CAAjC,QAAiC,CAAjC,KACAC,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAFF,GAEEA,CAFF,EAGE;AACA,aAAO,YAAwB;AAC7B,YAAMC,WAAW,GAAGF,UAAU,CAAVA,MAAU,CAAVA,GAAqBG,MAAM,MAANA,SAArBH,SAAqBG,CAArBH,GAApB,MAAA;AAEA,YAAMI,aAAa,GAAGJ,UAAU,CAAVA,QAAU,CAAVA,GAClBK,QAAQ,MAARA,SADkBL,SAClBK,CADkBL,GAAtB,QAAA;AAIA,eAAOM,SAAS,CAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAhB,UAAgB,CAAhB;AAPF,OAAA;AALF,KAAA,CAgBA;;;AACA,WAAA,SAAA;AACD;;AAED,SAAOA,SAAS,CAAA,EAAA,EAAA,SAAA,EAAA,SAAA,EAAhB,UAAgB,CAAhB;AACD","sourcesContent":["import defaultTheme, { ChakraTheme, Theme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        Partial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends Array<any>\n    ? CloneKey<ThemeType, Key>\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<Partial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport type ThemeOverride = Partial<ChakraTheme> &\n  DeepThemeExtension<Theme, ChakraTheme>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\nexport function extendTheme<\n  BaseTheme extends ChakraTheme = Theme,\n  Overrides extends ThemeOverride = ThemeOverride\n>(\n  overrides: Overrides,\n  baseTheme: BaseTheme = (defaultTheme as unknown) as BaseTheme,\n): BaseTheme & Overrides {\n  function customizer(\n    source: unknown,\n    override: unknown,\n    key: string,\n    object: any,\n  ) {\n    if (\n      (isFunction(source) || isFunction(override)) &&\n      Object.prototype.hasOwnProperty.call(object, key)\n    ) {\n      return (...args: unknown[]) => {\n        const sourceValue = isFunction(source) ? source(...args) : source\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer)\n}\n"]},"metadata":{},"sourceType":"module"}