{"ast":null,"code":"import _slicedToArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useState, useCallback } from \"react\";\nimport { useControllableProp } from \"@chakra-ui/hooks\";\nimport { isInputEvent, addItem, removeItem } from \"@chakra-ui/utils\";\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\n\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultValue = _props.defaultValue,\n      valueProp = _props.value,\n      onChangeProp = _props.onChange,\n      isNative = _props.isNative;\n\n  var _useState = useState(defaultValue || []),\n      _useState2 = _slicedToArray(_useState, 2),\n      valueState = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useControllableProp = useControllableProp(valueProp, valueState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      value = _useControllableProp2[1];\n\n  var updateValue = useCallback(function (nextState) {\n    if (!isControlled) {\n      setValue(nextState);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(nextState);\n  }, [isControlled, onChangeProp]);\n  var onChange = useCallback(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    updateValue(nextValue);\n  }, [updateValue, value]);\n  return {\n    value: value,\n    onChange: onChange,\n    setValue: updateValue,\n    getCheckboxProps: function getCheckboxProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      var checkedKey = isNative ? \"checked\" : \"isChecked\";\n      return _extends({}, props, {\n        [checkedKey]: value.includes(props.value),\n        onChange: onChange\n      });\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}