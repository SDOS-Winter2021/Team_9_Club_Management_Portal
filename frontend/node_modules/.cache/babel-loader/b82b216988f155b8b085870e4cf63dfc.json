{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport React__default, { useContext } from 'react';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\n\nvar Measure =\n/** @class */\nfunction (_super) {\n  __extends(Measure, _super);\n\n  function Measure() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * If this is a child of a SyncContext, register the VisualElement with it on mount.\n   */\n\n\n  Measure.prototype.componentDidMount = function () {\n    var _a = this.props,\n        syncLayout = _a.syncLayout,\n        framerSyncLayout = _a.framerSyncLayout,\n        visualElement = _a.visualElement;\n    isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n    isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement);\n    visualElement.onUnmount(function () {\n      if (isSharedLayout(syncLayout)) {\n        syncLayout.remove(visualElement);\n      }\n\n      if (isSharedLayout(framerSyncLayout)) {\n        framerSyncLayout.remove(visualElement);\n      }\n    });\n  };\n  /**\n   * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n   * handle the snapshotting.\n   *\n   * If it is stand-alone component, add it to the batcher.\n   */\n\n\n  Measure.prototype.getSnapshotBeforeUpdate = function () {\n    var _a = this.props,\n        syncLayout = _a.syncLayout,\n        visualElement = _a.visualElement;\n\n    if (isSharedLayout(syncLayout)) {\n      syncLayout.syncUpdate();\n    } else {\n      visualElement.snapshotViewportBox();\n      syncLayout.add(visualElement);\n    }\n\n    return null;\n  };\n\n  Measure.prototype.componentDidUpdate = function () {\n    var _a = this.props,\n        syncLayout = _a.syncLayout,\n        visualElement = _a.visualElement;\n    if (!isSharedLayout(syncLayout)) syncLayout.flush();\n    /**\n     * If this axis isn't animating as a result of this render we want to reset the targetBox\n     * to the measured box\n     */\n\n    visualElement.rebaseProjectionTarget();\n  };\n\n  Measure.prototype.render = function () {\n    return null;\n  };\n\n  return Measure;\n}(React__default.Component);\n\nfunction MeasureContextProvider(props) {\n  var syncLayout = useContext(SharedLayoutContext);\n  var framerSyncLayout = useContext(FramerTreeLayoutContext);\n  return React__default.createElement(Measure, __assign({}, props, {\n    syncLayout: syncLayout,\n    framerSyncLayout: framerSyncLayout\n  }));\n}\n\nexport { MeasureContextProvider };","map":{"version":3,"sources":["D:/Team_9_Club_Management_Portal/frontend/node_modules/framer-motion/dist/es/motion/features/layout/Measure.js"],"names":["__extends","__assign","React__default","useContext","isSharedLayout","SharedLayoutContext","FramerTreeLayoutContext","Measure","_super","apply","arguments","prototype","componentDidMount","_a","props","syncLayout","framerSyncLayout","visualElement","register","onUnmount","remove","getSnapshotBeforeUpdate","syncUpdate","snapshotViewportBox","add","componentDidUpdate","flush","rebaseProjectionTarget","render","Component","MeasureContextProvider","createElement"],"mappings":"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","sourcesContent":["import { __extends, __assign } from 'tslib';\nimport React__default, { useContext } from 'react';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */ (function (_super) {\n    __extends(Measure, _super);\n    function Measure() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * If this is a child of a SyncContext, register the VisualElement with it on mount.\n     */\n    Measure.prototype.componentDidMount = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement = _a.visualElement;\n        isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n        isSharedLayout(framerSyncLayout) &&\n            framerSyncLayout.register(visualElement);\n        visualElement.onUnmount(function () {\n            if (isSharedLayout(syncLayout)) {\n                syncLayout.remove(visualElement);\n            }\n            if (isSharedLayout(framerSyncLayout)) {\n                framerSyncLayout.remove(visualElement);\n            }\n        });\n    };\n    /**\n     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n     * handle the snapshotting.\n     *\n     * If it is stand-alone component, add it to the batcher.\n     */\n    Measure.prototype.getSnapshotBeforeUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (isSharedLayout(syncLayout)) {\n            syncLayout.syncUpdate();\n        }\n        else {\n            visualElement.snapshotViewportBox();\n            syncLayout.add(visualElement);\n        }\n        return null;\n    };\n    Measure.prototype.componentDidUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (!isSharedLayout(syncLayout))\n            syncLayout.flush();\n        /**\n         * If this axis isn't animating as a result of this render we want to reset the targetBox\n         * to the measured box\n         */\n        visualElement.rebaseProjectionTarget();\n    };\n    Measure.prototype.render = function () {\n        return null;\n    };\n    return Measure;\n}(React__default.Component));\nfunction MeasureContextProvider(props) {\n    var syncLayout = useContext(SharedLayoutContext);\n    var framerSyncLayout = useContext(FramerTreeLayoutContext);\n    return (React__default.createElement(Measure, __assign({}, props, { syncLayout: syncLayout, framerSyncLayout: framerSyncLayout })));\n}\n\nexport { MeasureContextProvider };\n"]},"metadata":{},"sourceType":"module"}