{"ast":null,"code":"import { memoizedGet as get } from \"@chakra-ui/utils\";\n\nvar floatTransform = function floatTransform(value, theme) {\n  var map = {\n    left: \"right\",\n    right: \"left\"\n  };\n  return theme.direction === \"rtl\" ? map[value] : value;\n};\n\nvar srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\nvar srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\"\n};\n\nvar getWithPriority = function getWithPriority(theme, key, styles) {\n  var result = {};\n  var obj = get(theme, key, {});\n\n  for (var prop in obj) {\n    var isInStyles = prop in styles && styles[prop] != null;\n    if (!isInStyles) result[prop] = obj[prop];\n  }\n\n  return result;\n};\n\nexport var others = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    transform: function transform(value) {\n      if (value === true) return srOnly;\n      if (value === \"focusable\") return srFocusable;\n      return {};\n    }\n  },\n  layerStyle: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, \"layerStyles.\" + value, styles);\n    }\n  },\n  textStyle: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, \"textStyles.\" + value, styles);\n    }\n  },\n  apply: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, value, styles);\n    }\n  }\n};","map":{"version":3,"sources":["../../../src/config/others.ts"],"names":["memoizedGet","floatTransform","map","left","right","theme","srOnly","border","clip","width","height","margin","padding","overflow","whiteSpace","position","srFocusable","getWithPriority","result","obj","get","isInStyles","prop","styles","others","animation","appearance","visibility","userSelect","pointerEvents","cursor","resize","objectFit","objectPosition","float","property","transform","willChange","filter","clipPath","value","layerStyle","processResult","textStyle","apply"],"mappings":"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","sourcesContent":["import { memoizedGet as get } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config } from \"../prop-config\"\nimport { Transform } from \"../types\"\nimport { Length, ResponsiveValue, Token } from \"../utils\"\n\nconst floatTransform: Transform = (value, theme) => {\n  const map = { left: \"right\", right: \"left\" }\n  return theme.direction === \"rtl\" ? map[value] : value\n}\n\nconst srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\nconst srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\",\n}\n\nconst getWithPriority = (theme: any, key: any, styles: any) => {\n  const result = {}\n  const obj = get(theme, key, {})\n  for (const prop in obj) {\n    const isInStyles = prop in styles && styles[prop] != null\n    if (!isInStyles) result[prop] = obj[prop]\n  }\n  return result\n}\n\nexport const others: Config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform,\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    transform(value) {\n      if (value === true) return srOnly\n      if (value === \"focusable\") return srFocusable\n      return {}\n    },\n  },\n  layerStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `layerStyles.${value}`, styles),\n  },\n  textStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `textStyles.${value}`, styles),\n  },\n  apply: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, value, styles),\n  },\n}\n\nexport interface OtherProps {\n  /**\n   * The CSS `animation` property\n   */\n  animation?: ResponsiveValue<CSS.Property.Animation>\n  /**\n   * The CSS `appearance` property\n   */\n  appearance?: ResponsiveValue<CSS.Property.Appearance>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: ResponsiveValue<CSS.Property.Visibility>\n  /**\n   * The CSS `user-select` property\n   */\n  userSelect?: ResponsiveValue<CSS.Property.UserSelect>\n  /**\n   * The CSS `pointer-events` property\n   */\n  pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>\n  /**\n   * The CSS `cursor` property\n   */\n  cursor?: ResponsiveValue<CSS.Property.Cursor>\n  /**\n   * The CSS `resize` property\n   */\n  resize?: ResponsiveValue<CSS.Property.Resize>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: ResponsiveValue<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-position` property\n   */\n  objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `float` property\n   */\n  float?: ResponsiveValue<CSS.Property.Float>\n  /**\n   * The CSS `will-change` property\n   */\n  willChange?: ResponsiveValue<CSS.Property.WillChange>\n  /**\n   * The CSS `filter` property\n   */\n  filter?: ResponsiveValue<CSS.Property.Filter>\n  /**\n   * If `true`, hide an element visually without hiding it from screen readers.\n   *\n   * If `focusable`, the sr-only styles will be undone, making the element visible\n   * to sighted users as well as screen readers.\n   */\n  srOnly?: true | \"focusable\"\n  /**\n   * The CSS `clip-path` property.\n   *\n   * It creates a clipping region that sets what part of an element should be shown.\n   */\n  clipPath?: ResponsiveValue<CSS.Property.ClipPath>\n  /**\n   * The layer style object to apply.\n   * Note: Styles must be located in `theme.layerStyles`\n   */\n  layerStyle?: Token<string & {}, \"layerStyles\">\n  /**\n   * The text style object to apply.\n   * Note: Styles must be located in `theme.textStyles`\n   */\n  textStyle?: Token<string & {}, \"textStyles\">\n  /**\n   * Apply theme-aware style objects in `theme`\n   */\n  apply?: ResponsiveValue<string>\n}\n"]},"metadata":{},"sourceType":"module"}