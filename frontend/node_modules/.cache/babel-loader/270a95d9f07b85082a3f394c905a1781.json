{"ast":null,"code":"import _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { usePopover } from \"./use-popover\";\nvar motionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    },\n    transitionEnd: {\n      visibility: \"hidden\"\n    }\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\n\nvar _createContext = createContext({\n  name: \"PopoverContext\",\n  errorMessage: \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    PopoverProvider = _createContext2[0],\n    usePopoverContext = _createContext2[1];\n\nexport { usePopoverContext };\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\n\nexport var Popover = function Popover(props) {\n  var styles = useMultiStyleConfig(\"Popover\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var context = usePopover(rest);\n  return /*#__PURE__*/React.createElement(PopoverProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: context.isOpen,\n    onClose: context.onClose,\n    forceUpdate: context.forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\";\n}\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\n\nexport var PopoverTrigger = function PopoverTrigger(props) {\n  // enforce a single child\n  var child = React.Children.only(props.children);\n\n  var _usePopoverContext = usePopoverContext(),\n      getTriggerProps = _usePopoverContext.getTriggerProps;\n\n  return /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props, child.ref));\n};\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\";\n}\n\nvar Motion = chakra(motion.section);\nexport var PopoverContent = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext2 = usePopoverContext(),\n      isOpen = _usePopoverContext2.isOpen,\n      getPopoverProps = _usePopoverContext2.getPopoverProps,\n      onTransitionEnd = _usePopoverContext2.onTransitionEnd,\n      getPopoverPositionerProps = _usePopoverContext2.getPopoverPositionerProps;\n\n  var styles = useStyles();\n\n  var contentStyles = _extends({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, styles.content);\n\n  var popoverProps = getPopoverProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    __css: styles.popper\n  }, getPopoverPositionerProps()), /*#__PURE__*/React.createElement(Motion, _extends({}, popoverProps, {\n    onUpdate: onTransitionEnd,\n    className: cx(\"chakra-popover__content\", props.className),\n    __css: contentStyles,\n    variants: motionVariants,\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\"\n  })));\n});\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\";\n}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\n\n\nexport var PopoverHeader = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext3 = usePopoverContext(),\n      headerId = _usePopoverContext3.headerId,\n      setHasHeader = _usePopoverContext3.setHasHeader;\n\n  React.useEffect(function () {\n    setHasHeader.on();\n    return function () {\n      return setHasHeader.off();\n    };\n  }, [setHasHeader]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({}, props, {\n    className: cx(\"chakra-popover__header\", props.className),\n    id: headerId,\n    ref: ref,\n    __css: styles.header\n  }));\n});\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\";\n}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\n\nexport var PopoverBody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext4 = usePopoverContext(),\n      bodyId = _usePopoverContext4.bodyId,\n      setHasBody = _usePopoverContext4.setHasBody;\n\n  React.useEffect(function () {\n    setHasBody.on();\n    return function () {\n      return setHasBody.off();\n    };\n  }, [setHasBody]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    className: cx(\"chakra-popover__body\", props.className),\n    id: bodyId,\n    ref: ref,\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\";\n}\n\nexport var PopoverFooter = function PopoverFooter(props) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({}, props, {\n    className: cx(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  }));\n};\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\";\n}\n\nexport var PopoverCloseButton = function PopoverCloseButton(props) {\n  var _usePopoverContext5 = usePopoverContext(),\n      onClose = _usePopoverContext5.onClose;\n\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    borderRadius: \"md\",\n    top: \"0.25rem\",\n    right: \"0.5rem\",\n    padding: \"0.5rem\"\n  }, props));\n};\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\";\n}\n\nexport var PopoverArrow = function PopoverArrow(props) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, {\n    \"data-popper-arrow\": true,\n    className: \"chakra-popover__arrow-positioner\"\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-popover__arrow\", props.className)\n  }, props, {\n    \"data-popper-arrow-inner\": true,\n    __css: styles.arrow\n  })));\n};\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\";\n}","map":{"version":3,"sources":["../../src/popover.tsx"],"names":["motionVariants","exit","opacity","scale","transition","duration","ease","transitionEnd","visibility","enter","createContext","name","errorMessage","Popover","props","styles","useMultiStyleConfig","children","omitThemingProps","context","usePopover","runIfFn","isOpen","onClose","forceUpdate","PopoverTrigger","child","React","getTriggerProps","usePopoverContext","Motion","chakra","motion","PopoverContent","forwardRef","getPopoverPositionerProps","useStyles","contentStyles","position","display","flexDirection","popoverProps","getPopoverProps","popper","cx","PopoverHeader","setHasHeader","header","PopoverBody","setHasBody","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","arrow"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport { motion, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport { usePopover, UsePopoverProps, UsePopoverReturn } from \"./use-popover\"\n\nconst motionVariants: Variants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n    transitionEnd: {\n      visibility: \"hidden\",\n    },\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst [PopoverProvider, usePopoverContext] = createContext<UsePopoverReturn>({\n  name: \"PopoverContext\",\n  errorMessage:\n    \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n})\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends HTMLChakraProps<\"section\"> {}\n\nconst Motion = chakra(motion.section)\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  (props, ref) => {\n    const {\n      isOpen,\n      getPopoverProps,\n      onTransitionEnd,\n      getPopoverPositionerProps,\n    } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    const popoverProps: any = getPopoverProps(props, ref)\n\n    return (\n      <chakra.div __css={styles.popper} {...getPopoverPositionerProps()}>\n        <Motion\n          {...popoverProps}\n          onUpdate={onTransitionEnd}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n          variants={motionVariants}\n          initial={false}\n          animate={isOpen ? \"enter\" : \"exit\"}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  (props, ref) => {\n    const { headerId, setHasHeader } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasHeader.on()\n      return () => setHasHeader.off()\n    }, [setHasHeader])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...props}\n        className={cx(\"chakra-popover__header\", props.className)}\n        id={headerId}\n        ref={ref}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">((props, ref) => {\n  const { bodyId, setHasBody } = usePopoverContext()\n\n  React.useEffect(() => {\n    setHasBody.on()\n    return () => setHasBody.off()\n  }, [setHasBody])\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...props}\n      className={cx(\"chakra-popover__body\", props.className)}\n      id={bodyId}\n      ref={ref}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      right=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.div data-popper-arrow className=\"chakra-popover__arrow-positioner\">\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...props}\n        data-popper-arrow-inner\n        __css={styles.arrow}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"]},"metadata":{},"sourceType":"module"}