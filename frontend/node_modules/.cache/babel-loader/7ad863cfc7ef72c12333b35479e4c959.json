{"ast":null,"code":"import _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useState, useCallback } from \"react\";\nimport { useControllableProp } from \"@chakra-ui/hooks\";\nimport { isInputEvent, addItem, removeItem } from \"@chakra-ui/utils\";\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\n\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultValue = _props.defaultValue,\n      valueProp = _props.value,\n      onChangeProp = _props.onChange,\n      isNative = _props.isNative;\n\n  var _useState = useState(defaultValue || []),\n      _useState2 = _slicedToArray(_useState, 2),\n      valueState = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useControllableProp = useControllableProp(valueProp, valueState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      value = _useControllableProp2[1];\n\n  var updateValue = useCallback(function (nextState) {\n    if (!isControlled) {\n      setValue(nextState);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(nextState);\n  }, [isControlled, onChangeProp]);\n  var onChange = useCallback(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    updateValue(nextValue);\n  }, [updateValue, value]);\n  return {\n    value: value,\n    onChange: onChange,\n    setValue: updateValue,\n    getCheckboxProps: function getCheckboxProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      var checkedKey = isNative ? \"checked\" : \"isChecked\";\n      return _extends({}, props, {\n        [checkedKey]: value.includes(props.value),\n        onChange: onChange\n      });\n    }\n  };\n}","map":{"version":3,"sources":["../../src/use-checkbox-group.ts"],"names":["props","value","onChange","isNative","useState","defaultValue","useControllableProp","updateValue","useCallback","nextState","setValue","onChangeProp","eventOrValue","isChecked","isInputEvent","selectedValue","nextValue","addItem","removeItem","getCheckboxProps","checkedKey"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAAA,QAAA,EAAA,WAAA,QAAA,OAAA;AACA,SAAA,mBAAA,QAAA,kBAAA;AACA,SAAA,YAAA,EAAA,OAAA,EAAA,UAAA,QAAA,kBAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,gBAAA,CAAA,KAAA,EAA6D;AAAA,MAAnCA,KAAmC,KAAA,KAAA,CAAA,EAAA;AAAnCA,IAAAA,KAAmC,GAAJ,EAA/BA;AAAmC;;AAAA,eAClE,KADkE;AAAA,MAC5D,YAD4D,UAC5D,YAD4D;AAAA,MAC5D,SAD4D,UAGhEC,KAHgE;AAAA,MAC5D,YAD4D,UAIhEC,QAJgE;AAAA,MAKhEC,QALgE,UAKhEA,QALgE;;AAAA,kBAQnCC,QAAQ,CAACC,YAAY,IAApD,EAAuC,CAR2B;AAAA;AAAA,MAQ5D,UAR4D;AAAA,MAQ5D,QAR4D;;AAAA,6BASpCC,mBAAmB,CAAA,SAAA,EAAjD,UAAiD,CATiB;AAAA;AAAA,MAS5D,YAT4D;AAAA,MAS5D,KAT4D;;AAWlE,MAAMC,WAAW,GAAGC,WAAW,CAC5BC,UAAAA,SAAD,EAAiC;AAC/B,QAAI,CAAJ,YAAA,EAAmB;AACjBC,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AACD;;AAEDC,IAAAA,YAAY,IAAZA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAZA,SAAY,CAAZA;AAN2B,GAAA,EAQ7B,CAAA,YAAA,EARF,YAQE,CAR6B,CAA/B;AAWA,MAAMT,QAAQ,GAAGM,WAAW,CACzBI,UAAAA,YAAD,EAAgC;AAC9B,QAAI,CAAJ,KAAA,EAAY;AAEZ,QAAMC,SAAS,GAAGC,YAAY,CAAZA,YAAY,CAAZA,GACdF,YAAY,CAAZA,MAAAA,CADcE,OAAAA,GAEd,CAACb,KAAK,CAALA,QAAAA,CAFL,YAEKA,CAFL;AAIA,QAAMc,aAAa,GAAGD,YAAY,CAAZA,YAAY,CAAZA,GAClBF,YAAY,CAAZA,MAAAA,CADkBE,KAAAA,GAAtB,YAAA;AAIA,QAAME,SAAS,GAAGH,SAAS,GACvBI,OAAO,CAAA,KAAA,EADgB,aAChB,CADgB,GAEvBC,UAAU,CAAA,KAAA,EAFd,aAEc,CAFd;AAIAX,IAAAA,WAAW,CAAXA,SAAW,CAAXA;AAhBwB,GAAA,EAkB1B,CAAA,WAAA,EAlBF,KAkBE,CAlB0B,CAA5B;AAqBA,SAAO;AACLN,IAAAA,KADK,EACLA,KADK;AAELC,IAAAA,QAFK,EAELA,QAFK;AAGLQ,IAAAA,QAAQ,EAHH,WAAA;AAILS,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAA,KAAA,EAAsB;AAAA,UAArBnB,KAAqB,KAAA,KAAA,CAAA,EAAA;AAArBA,QAAAA,KAAqB,GAAP,EAAdA;AAAqB;;AACtC,UAAMoB,UAAU,GAAGjB,QAAQ,GAAA,SAAA,GAA3B,WAAA;AACA,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,SAAA,UAAA,GAAcF,KAAK,CAALA,QAAAA,CAAeD,KAAK,CAFpC,KAEgBC,CAFhB;AAGEC,QAAAA,QAAAA,EAAAA;AAHF,OAAA,CAAA;AAKD;AAXI,GAAP;AAaD","sourcesContent":["import { useState, useCallback, ChangeEvent } from \"react\"\nimport { useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  isInputEvent,\n  addItem,\n  removeItem,\n  StringOrNumber,\n  Dict,\n} from \"@chakra-ui/utils\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n    isNative,\n  } = props\n\n  const [valueState, setValue] = useState(defaultValue || [])\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const updateValue = useCallback(\n    (nextState: StringOrNumber[]) => {\n      if (!isControlled) {\n        setValue(nextState)\n      }\n\n      onChangeProp?.(nextState)\n    },\n    [isControlled, onChangeProp],\n  )\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      updateValue(nextValue)\n    },\n    [updateValue, value],\n  )\n\n  return {\n    value,\n    onChange,\n    setValue: updateValue,\n    getCheckboxProps: (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange,\n      }\n    },\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"]},"metadata":{},"sourceType":"module"}