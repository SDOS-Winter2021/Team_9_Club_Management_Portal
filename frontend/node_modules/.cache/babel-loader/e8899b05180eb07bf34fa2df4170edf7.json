{"ast":null,"code":"import _toArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { isCssVar, isObject, pick, analyzeBreakpoints } from \"@chakra-ui/utils\";\n\nvar replaceWhiteSpace = function replaceWhiteSpace(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = \"-\";\n  }\n\n  return value.replace(/\\s+/g, replaceValue);\n};\n\nvar escape = function escape(value) {\n  var valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  var isDecimal = !Number.isInteger(parseFloat(value.toString()));\n  return isDecimal ? valueStr.replace(\".\", \"\\\\.\") : value;\n};\n\nexport var toVarDefinition = function toVarDefinition(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n\n  return \"--\" + [prefix, escape(value)].filter(Boolean).join(\"-\");\n};\nexport var toVarReference = function toVarReference(value) {\n  return \"var(\" + escape(value) + \")\";\n};\nexport var toNegativeVar = function toNegativeVar(value) {\n  return \"calc(\" + escape(value) + \" * -1)\";\n};\nexport var tokens = [\"colors\", \"borders\", \"borderWidths\", \"borderStyles\", \"fonts\", \"fontSizes\", \"fontWeights\", \"letterSpacings\", \"lineHeights\", \"radii\", \"space\", \"shadows\", \"sizes\", \"zIndices\", \"transitions\", \"transition.duration\", \"transition.property\", \"transition.easing\"];\n\nfunction extractTokens(theme) {\n  var _tokens = tokens;\n  return pick(theme, _tokens);\n}\n\nfunction omitVars(rawTheme) {\n  var cleanTheme = _objectWithoutPropertiesLoose(rawTheme, [\"__cssMap\", \"__cssVars\", \"__breakpoints\"]);\n\n  return cleanTheme;\n}\n/**\n * The CSS transform order following the upcoming spec from CSSWG\n * translate => rotate => scale => skew\n * @see https://drafts.csswg.org/css-transforms-2/#ctm\n * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/\n */\n\n\nvar transformTemplate = [\"rotate(var(--chakra-rotate, 0))\", \"scaleX(var(--chakra-scale-x, 1))\", \"scaleY(var(--chakra-scale-y, 1))\", \"skewX(var(--chakra-skew-x, 0))\", \"skewY(var(--chakra-skew-y, 0))\"];\nexport function getTransformTemplate() {\n  return [\"translateX(var(--chakra-translate-x, 0))\", \"translateY(var(--chakra-translate-y, 0))\"].concat(transformTemplate).join(\" \");\n}\nexport function getTransformGpuTemplate() {\n  return [\"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\"].concat(transformTemplate).join(\" \");\n}\nexport function toCSSVar(rawTheme) {\n  var _theme$config;\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n\n\n  var theme = omitVars(rawTheme); // omit components and breakpoints from css variable map\n\n  var tokens = extractTokens(theme);\n  var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;\n\n  var _toProperties = toProperties(tokens, {\n    cssVarPrefix: cssVarPrefix\n  }),\n      cssMap = _toProperties.cssMap,\n      cssVars = _toProperties.cssVars;\n\n  var defaultCssVars = {\n    \"--chakra-ring-offset\": \"0px\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-width\": \"3px\",\n    \"--chakra-ring-inset\": \"var(--chakra-empty, /*!*/ /*!*/)\",\n    \"--chakra-ring-offset-shadow\": \"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)\",\n    \"--chakra-ring-shadow\": \"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)\",\n    \"--chakra-ring\": \"var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent\",\n    \"--chakra-transform-gpu\": getTransformGpuTemplate(),\n    \"--chakra-transform\": getTransformTemplate(),\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\"\n  };\n  Object.assign(theme, {\n    __cssVars: _extends({}, defaultCssVars, cssVars),\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints)\n  });\n  return theme;\n}\n\nfunction toProperties(target, options, initialContext, prefixes) {\n  if (prefixes === void 0) {\n    prefixes = [];\n  }\n\n  var context = {\n    cssMap: _extends({}, initialContext == null ? void 0 : initialContext.cssMap),\n    cssVars: _extends({}, initialContext == null ? void 0 : initialContext.cssVars)\n  };\n  return Object.entries(target).reduce(function (properties, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (isObject(value) || Array.isArray(value)) {\n      var nested = toProperties(value, options, properties, prefixes.concat(key));\n      Object.assign(properties.cssVars, nested.cssVars);\n      Object.assign(properties.cssMap, nested.cssMap);\n    } else {\n      var _tokenHandlerMap$firs;\n\n      var finalKey = prefixes.concat(key); // firstKey will be e.g. \"space\"\n\n      var _finalKey = _slicedToArray(finalKey, 1),\n          firstKey = _finalKey[0];\n\n      var handler = (_tokenHandlerMap$firs = tokenHandlerMap[firstKey]) != null ? _tokenHandlerMap$firs : tokenHandlerMap.defaultHandler;\n\n      var _handler = handler(finalKey, value, options),\n          cssVars = _handler.cssVars,\n          cssMap = _handler.cssMap;\n\n      Object.assign(properties.cssVars, cssVars);\n      Object.assign(properties.cssMap, cssMap);\n    }\n\n    return properties;\n  }, context);\n}\n/**\n * Define transformation handlers for ThemeScale\n */\n\n\nvar tokenHandlerMap = {\n  space: function space(keys, value, options) {\n    var properties = tokenHandlerMap.defaultHandler(keys, value, options);\n\n    var _keys = _toArray(keys),\n        firstKey = _keys[0],\n        referenceKeys = _keys.slice(1);\n\n    var negativeLookupKey = firstKey + \".-\" + referenceKeys.join(\".\");\n    var negativeVarKey = keys.join(\"-\");\n    var cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix);\n    var negativeValue = isCssVar(String(value)) ? toNegativeVar(String(value)) : \"-\" + value;\n    var varRef = toNegativeVar(toVarReference(cssVar));\n    return {\n      cssVars: properties.cssVars,\n      cssMap: _extends({}, properties.cssMap, {\n        [negativeLookupKey]: {\n          value: negativeValue,\n          var: cssVar,\n          varRef: varRef\n        }\n      })\n    };\n  },\n  defaultHandler: function defaultHandler(keys, value, options) {\n    var lookupKey = keys.join(\".\");\n    var varKey = keys.join(\"-\");\n    var cssVar = toVarDefinition(varKey, options.cssVarPrefix);\n    return {\n      cssVars: {\n        [cssVar]: value\n      },\n      cssMap: {\n        [lookupKey]: {\n          value: value,\n          var: cssVar,\n          varRef: toVarReference(cssVar)\n        }\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}