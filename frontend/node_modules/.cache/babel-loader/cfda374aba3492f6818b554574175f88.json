{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { isNumber } from \"@chakra-ui/utils\";\nimport { createTransform, px as pxTransform } from \"../create-transform\";\nimport { logical, toConfig } from \"../prop-config\";\nexport * from \"./types\";\n\nfunction fractionalValue(value) {\n  return !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n}\n\nexport var t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", pxTransform),\n  space: toConfig(\"space\", pxTransform),\n  spaceT: toConfig(\"space\", pxTransform),\n  prop: function prop(property, scale, transform) {\n    return _extends({\n      property: property,\n      scale: scale\n    }, scale && {\n      transform: createTransform({\n        scale: scale,\n        transform: transform\n      })\n    });\n  },\n  sizes: toConfig(\"sizes\", pxTransform),\n  sizesT: toConfig(\"sizes\", fractionalValue),\n  shadows: toConfig(\"shadows\"),\n  logical: logical\n};","map":{"version":3,"sources":["../../../src/utils/index.ts"],"names":["px","isNumber","value","t","borderWidths","toConfig","borderStyles","colors","borders","radii","space","spaceT","prop","property","scale","transform","createTransform","sizes","sizesT","shadows","logical"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,QAAA,QAAA,kBAAA;AACA,SAAA,eAAA,EAA0BA,EAAE,IAA5B,WAAA,QAAA,qBAAA;AAEA,SAAA,OAAA,EAAA,QAAA,QAAA,gBAAA;AAEA,cAAA,SAAA;;AAEA,SAAA,eAAA,CAAA,KAAA,EAAqC;AACnC,SAAO,CAACC,QAAQ,CAAT,KAAS,CAAT,IAAoBC,KAAK,GAAzB,CAAA,GAAA,KAAA,GAA2CA,KAAK,GAAhD,GAA2CA,GAAlD,GAAA;AACD;;AAED,OAAO,IAAMC,CAAC,GAAG;AACfC,EAAAA,YAAY,EAAEC,QAAQ,CADP,cACO,CADP;AAEfC,EAAAA,YAAY,EAAED,QAAQ,CAFP,cAEO,CAFP;AAGfE,EAAAA,MAAM,EAAEF,QAAQ,CAHD,QAGC,CAHD;AAIfG,EAAAA,OAAO,EAAEH,QAAQ,CAJF,SAIE,CAJF;AAKfI,EAAAA,KAAK,EAAEJ,QAAQ,CAAA,OAAA,EALA,WAKA,CALA;AAMfK,EAAAA,KAAK,EAAEL,QAAQ,CAAA,OAAA,EANA,WAMA,CANA;AAOfM,EAAAA,MAAM,EAAEN,QAAQ,CAAA,OAAA,EAPD,WAOC,CAPD;AAQfO,EAAAA,IAAI,EAAE,cAAA,QAAA,EAAA,KAAA,EAAA,SAAA;AAAA,WAAA,QAAA,CAAA;AAKJC,MAAAA,QALI,EAKJA,QALI;AAMJC,MAAAA,KAAAA,EAAAA;AANI,KAAA,EAOAA,KAAK,IAAI;AACXC,MAAAA,SAAS,EAAEC,eAAe,CAAC;AACzBF,QAAAA,KADyB,EACzBA,KADyB;AAEzBC,QAAAA,SAAAA,EAAAA;AAFyB,OAAD;AADf,KAPT,CAAA;AAAA,GARS;AAsBfE,EAAAA,KAAK,EAAEZ,QAAQ,CAAA,OAAA,EAtBA,WAsBA,CAtBA;AAuBfa,EAAAA,MAAM,EAAEb,QAAQ,CAAA,OAAA,EAvBD,eAuBC,CAvBD;AAwBfc,EAAAA,OAAO,EAAEd,QAAQ,CAxBF,SAwBE,CAxBF;AAyBfe,EAAAA,OAAAA,EAAAA;AAzBe,CAAV","sourcesContent":["import { isNumber } from \"@chakra-ui/utils\"\nimport { createTransform, px as pxTransform } from \"../create-transform\"\nimport type { ThemeScale } from \"../css-var\"\nimport { logical, PropConfig, toConfig } from \"../prop-config\"\n\nexport * from \"./types\"\n\nfunction fractionalValue(value: any) {\n  return !isNumber(value) || value > 1 ? value : `${value * 100}%`\n}\n\nexport const t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", pxTransform),\n  space: toConfig(\"space\", pxTransform),\n  spaceT: toConfig(\"space\", pxTransform),\n  prop: (\n    property: PropConfig[\"property\"],\n    scale?: ThemeScale,\n    transform?: PropConfig[\"transform\"],\n  ) => ({\n    property,\n    scale,\n    ...(scale && {\n      transform: createTransform({\n        scale,\n        transform,\n      }),\n    }),\n  }),\n  sizes: toConfig(\"sizes\", pxTransform),\n  sizesT: toConfig(\"sizes\", fractionalValue),\n  shadows: toConfig(\"shadows\"),\n  logical,\n}\n"]},"metadata":{},"sourceType":"module"}