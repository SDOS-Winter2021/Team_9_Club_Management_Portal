{"ast":null,"code":"import _toConsumableArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, createContext, mergeRefs } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\nvar _createContext = createContext({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    PinInputProvider = _createContext2[0],\n    usePinInputContext = _createContext2[1];\n\nexport { PinInputProvider, usePinInputContext };\n\nvar toArray = function toArray(value) {\n  return value == null ? void 0 : value.split(\"\");\n};\n\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\n\nexport function usePinInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      autoFocus = _props.autoFocus,\n      value = _props.value,\n      defaultValue = _props.defaultValue,\n      _onChange = _props.onChange,\n      onComplete = _props.onComplete,\n      _props$placeholder = _props.placeholder,\n      placeholder = _props$placeholder === void 0 ? \"â—‹\" : _props$placeholder,\n      _props$manageFocus = _props.manageFocus,\n      manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus,\n      _props$otp = _props.otp,\n      otp = _props$otp === void 0 ? false : _props$otp,\n      idProp = _props.id,\n      isDisabled = _props.isDisabled,\n      isInvalid = _props.isInvalid,\n      _props$type = _props.type,\n      type = _props$type === void 0 ? \"number\" : _props$type,\n      mask = _props.mask;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\" + uuid;\n  var domContext = useDescendants();\n  var descendants = domContext.descendants;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      moveFocus = _React$useState2[0],\n      setMoveFocus = _React$useState2[1];\n\n  var _useControllableState = useControllableState({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: function onChange(values) {\n      return _onChange == null ? void 0 : _onChange(values.join(\"\"));\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      values = _useControllableState2[0],\n      setValues = _useControllableState2[1];\n\n  React.useEffect(function () {\n    if (autoFocus) {\n      var _firstInput$element;\n\n      var firstInput = descendants[0];\n      firstInput == null ? void 0 : (_firstInput$element = firstInput.element) == null ? void 0 : _firstInput$element.focus();\n    } // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n\n  }, [descendants]);\n  var focusNext = React.useCallback(function (index) {\n    var _nextInput$element;\n\n    if (!moveFocus || !manageFocus) return;\n    var nextInput = descendants[index + 1];\n    nextInput == null ? void 0 : (_nextInput$element = nextInput.element) == null ? void 0 : _nextInput$element.focus();\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = React.useCallback(function (value, index) {\n    var nextValues = _toConsumableArray(values);\n\n    nextValues[index] = value;\n    setValues(nextValues);\n    var isComplete = value !== \"\" && index === descendants.length - 1 && nextValues.every(function (inputValue) {\n      return inputValue !== \"\";\n    });\n\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants.length]);\n  var clear = React.useCallback(function () {\n    var _firstInput$element2;\n\n    var values = Array(descendants.length).fill(\"\");\n    setValues(values);\n    var firstInput = descendants[0];\n    (_firstInput$element2 = firstInput.element) == null ? void 0 : _firstInput$element2.focus();\n  }, [descendants, setValues]);\n  var getNextValue = React.useCallback(function (value, eventValue) {\n    var nextValue = eventValue;\n\n    if ((value == null ? void 0 : value.length) > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n\n    return nextValue;\n  }, []);\n\n  var _React$useState3 = React.useState(-1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focusedIndex = _React$useState4[0],\n      setFocusedIndex = _React$useState4[1];\n\n  var getInputProps = React.useCallback(function (props) {\n    var index = props.index,\n        rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n    /**\n     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n     */\n\n\n    var onChange = function onChange(event) {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace\n\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      } // in the case of an autocomplete or copy and paste\n\n\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (validate(eventValue, type)) {\n          // Ensure the value matches the number of inputs\n          var _nextValue = eventValue.split(\"\").filter(function (_, index) {\n            return index < descendants.length;\n          });\n\n          setValues(_nextValue); // if pasting fills the entire input fields, trigger `onComplete`\n\n          if (_nextValue.length === descendants.length) {\n            onComplete == null ? void 0 : onComplete(_nextValue.join(\"\"));\n          }\n        }\n      } else {\n        // only set if the new value is a number\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n\n        setMoveFocus(true);\n      }\n    };\n\n    var onKeyDown = function onKeyDown(event) {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants[index - 1];\n\n          if (prevInput) {\n            var _prevInput$element;\n\n            setValue(\"\", index - 1);\n            (_prevInput$element = prevInput.element) == null ? void 0 : _prevInput$element.focus();\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n\n    var onFocus = function onFocus() {\n      setFocusedIndex(index);\n    };\n\n    var onBlur = function onBlur() {\n      setFocusedIndex(-1);\n    };\n\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _extends({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest, {\n      id: id + \"-\" + index,\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps: getInputProps,\n    // state\n    id: id,\n    domContext: domContext,\n    values: values,\n    // actions\n    setValue: setValue,\n    setValues: setValues,\n    clear: clear\n  };\n}\nexport function usePinInputField(props, forwardedRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (forwardedRef === void 0) {\n    forwardedRef = null;\n  }\n\n  var ref = React.useRef(null);\n\n  var _usePinInputContext = usePinInputContext(),\n      domContext = _usePinInputContext.domContext,\n      getInputProps = _usePinInputContext.getInputProps;\n\n  var index = useDescendant({\n    context: domContext,\n    element: ref.current\n  });\n  return getInputProps(_extends({}, props, {\n    ref: mergeRefs(ref, forwardedRef),\n    index: index\n  }));\n}","map":{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["createContext","name","errorMessage","toArray","value","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","type","props","onChange","placeholder","manageFocus","otp","id","mask","uuid","useId","idProp","domContext","useDescendants","descendants","React","useControllableState","defaultValue","values","firstInput","focusNext","index","nextInput","setValue","nextValues","setValues","isComplete","inputValue","onComplete","clear","Array","getNextValue","nextValue","eventValue","getInputProps","event","currentValue","validate","setMoveFocus","onKeyDown","prevInput","onFocus","setFocusedIndex","onBlur","hasFocus","focusedIndex","inputType","inputMode","disabled","ariaAttr","callAllHandlers","rest","autoComplete","forwardedRef","ref","usePinInputContext","useDescendant","context","element","current","mergeRefs"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  createContext,\n  mergeRefs,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype InputProps = Omit<\n  React.ComponentPropsWithRef<\"input\">,\n  \"color\" | \"height\" | \"width\"\n>\n\nexport type PinInputContext = UsePinInputReturn & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\nexport { PinInputProvider, usePinInputContext }\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const domContext = useDescendants<HTMLInputElement, {}>()\n  const { descendants } = domContext\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const firstInput = descendants[0]\n      firstInput?.element?.focus()\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n\n      const nextInput = descendants[index + 1]\n      nextInput?.element?.focus()\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        index === descendants.length - 1 &&\n        nextValues.every((inputValue) => inputValue !== \"\")\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants.length],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.length).fill(\"\")\n    setValues(values)\n    const firstInput = descendants[0]\n    firstInput.element?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.length)\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.length) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants[index - 1]\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              prevInput.element?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    domContext,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  forwardedRef: React.Ref<any> = null,\n) {\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  const { domContext, getInputProps } = usePinInputContext()\n\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    index,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}