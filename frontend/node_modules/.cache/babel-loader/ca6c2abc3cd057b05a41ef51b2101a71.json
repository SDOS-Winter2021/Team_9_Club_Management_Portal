{"ast":null,"code":"import _slicedToArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useTimeout, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { isFunction, __DEV__ } from \"@chakra-ui/utils\";\nimport ReachAlert from \"@reach/alert\";\nimport { motion, useIsPresent } from \"framer-motion\";\nimport * as React from \"react\";\nimport { getToastStyle } from \"./toast.utils\";\n/**\n * @todo After Gerrit refactors this implementation,\n * allow users to change the toast transition direction from\n * a `ToastProvider` component.\n *\n * Here's an API example:\n *\n * ```jsx\n * <ToastProvider\n *   motion={customVariants}\n *   component={CustomToastComponent}\n *   autoCloseTimeout={3000}\n *   toastSpacing={32} // this will control the `margin` value applied\n * >\n * </ToastProvider>\n * ```\n */\n\nvar toastMotionVariants = {\n  initial: function initial(props) {\n    var position = props.position;\n    var dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\";\n    var factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1;\n    if (position === \"bottom\") factor = 1;\n    return {\n      opacity: 0,\n      [dir]: factor * 24\n    };\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1]\n    }\n  }\n};\nexport var Toast = function Toast(props) {\n  var id = props.id,\n      message = props.message,\n      onCloseComplete = props.onCloseComplete,\n      onRequestRemove = props.onRequestRemove,\n      _props$requestClose = props.requestClose,\n      requestClose = _props$requestClose === void 0 ? false : _props$requestClose,\n      _props$position = props.position,\n      position = _props$position === void 0 ? \"bottom\" : _props$position,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 5000 : _props$duration;\n\n  var _React$useState = React.useState(duration),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      delay = _React$useState2[0],\n      setDelay = _React$useState2[1];\n\n  var isPresent = useIsPresent();\n  useUpdateEffect(function () {\n    if (!isPresent) {\n      onCloseComplete == null ? void 0 : onCloseComplete();\n    }\n  }, [isPresent]);\n  useUpdateEffect(function () {\n    setDelay(duration);\n  }, [duration]);\n\n  var onMouseEnter = function onMouseEnter() {\n    return setDelay(null);\n  };\n\n  var onMouseLeave = function onMouseLeave() {\n    return setDelay(duration);\n  };\n\n  var close = function close() {\n    if (isPresent) onRequestRemove();\n  };\n\n  React.useEffect(function () {\n    if (isPresent && requestClose) {\n      onRequestRemove();\n    }\n  }, [isPresent, requestClose, onRequestRemove]);\n  useTimeout(close, delay);\n  var style = React.useMemo(function () {\n    return getToastStyle(position);\n  }, [position]);\n  return /*#__PURE__*/React.createElement(motion.li, {\n    layout: true,\n    className: \"chakra-toast\",\n    variants: toastMotionVariants,\n    initial: \"initial\",\n    animate: \"animate\",\n    exit: \"exit\",\n    onHoverStart: onMouseEnter,\n    onHoverEnd: onMouseLeave,\n    custom: {\n      position: position\n    },\n    style: style\n  }, /*#__PURE__*/React.createElement(ReachAlert, {\n    className: \"chakra-toast__inner\",\n    style: {\n      pointerEvents: \"auto\",\n      maxWidth: 560,\n      minWidth: 300,\n      margin: \"0.5rem\"\n    }\n  }, isFunction(message) ? message({\n    id: id,\n    onClose: close\n  }) : message));\n};\n\nif (__DEV__) {\n  Toast.displayName = \"Toast\";\n}","map":null,"metadata":{},"sourceType":"module"}