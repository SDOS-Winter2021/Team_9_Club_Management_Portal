{"ast":null,"code":"import _slicedToArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { usePopover } from \"./use-popover\";\nvar motionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    },\n    transitionEnd: {\n      visibility: \"hidden\"\n    }\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\n\nvar _createContext = createContext({\n  name: \"PopoverContext\",\n  errorMessage: \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    PopoverProvider = _createContext2[0],\n    usePopoverContext = _createContext2[1];\n\nexport { usePopoverContext };\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\n\nexport var Popover = function Popover(props) {\n  var styles = useMultiStyleConfig(\"Popover\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var context = usePopover(rest);\n  return /*#__PURE__*/React.createElement(PopoverProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: context.isOpen,\n    onClose: context.onClose,\n    forceUpdate: context.forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\";\n}\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\n\nexport var PopoverTrigger = function PopoverTrigger(props) {\n  // enforce a single child\n  var child = React.Children.only(props.children);\n\n  var _usePopoverContext = usePopoverContext(),\n      getTriggerProps = _usePopoverContext.getTriggerProps;\n\n  return /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props, child.ref));\n};\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\";\n}\n\nvar Motion = chakra(motion.section);\nexport var PopoverContent = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext2 = usePopoverContext(),\n      isOpen = _usePopoverContext2.isOpen,\n      getPopoverProps = _usePopoverContext2.getPopoverProps,\n      onTransitionEnd = _usePopoverContext2.onTransitionEnd,\n      getPopoverPositionerProps = _usePopoverContext2.getPopoverPositionerProps;\n\n  var styles = useStyles();\n\n  var contentStyles = _extends({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, styles.content);\n\n  var popoverProps = getPopoverProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    __css: styles.popper\n  }, getPopoverPositionerProps()), /*#__PURE__*/React.createElement(Motion, _extends({}, popoverProps, {\n    onUpdate: onTransitionEnd,\n    className: cx(\"chakra-popover__content\", props.className),\n    __css: contentStyles,\n    variants: motionVariants,\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\"\n  })));\n});\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\";\n}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\n\n\nexport var PopoverHeader = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext3 = usePopoverContext(),\n      headerId = _usePopoverContext3.headerId,\n      setHasHeader = _usePopoverContext3.setHasHeader;\n\n  React.useEffect(function () {\n    setHasHeader.on();\n    return function () {\n      return setHasHeader.off();\n    };\n  }, [setHasHeader]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({}, props, {\n    className: cx(\"chakra-popover__header\", props.className),\n    id: headerId,\n    ref: ref,\n    __css: styles.header\n  }));\n});\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\";\n}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\n\nexport var PopoverBody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _usePopoverContext4 = usePopoverContext(),\n      bodyId = _usePopoverContext4.bodyId,\n      setHasBody = _usePopoverContext4.setHasBody;\n\n  React.useEffect(function () {\n    setHasBody.on();\n    return function () {\n      return setHasBody.off();\n    };\n  }, [setHasBody]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    className: cx(\"chakra-popover__body\", props.className),\n    id: bodyId,\n    ref: ref,\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\";\n}\n\nexport var PopoverFooter = function PopoverFooter(props) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({}, props, {\n    className: cx(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  }));\n};\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\";\n}\n\nexport var PopoverCloseButton = function PopoverCloseButton(props) {\n  var _usePopoverContext5 = usePopoverContext(),\n      onClose = _usePopoverContext5.onClose;\n\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    borderRadius: \"md\",\n    top: \"0.25rem\",\n    right: \"0.5rem\",\n    padding: \"0.5rem\"\n  }, props));\n};\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\";\n}\n\nexport var PopoverArrow = function PopoverArrow(props) {\n  var _usePopoverContext6 = usePopoverContext(),\n      getArrowProps = _usePopoverContext6.getArrowProps,\n      getArrowPositionerProps = _usePopoverContext6.getArrowPositionerProps;\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getArrowPositionerProps(), {\n    className: cx(\"chakra-popover__arrow-positioner\", props.className)\n  }), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-popover__arrow\", props.className)\n  }, getArrowProps(props), {\n    __css: styles.arrow\n  })));\n};\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\";\n}","map":null,"metadata":{},"sourceType":"module"}