{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { EASINGS } from \"./__utils\";\nvar transitions = {\n  enter: {\n    duration: 0.2,\n    ease: EASINGS.easeOut\n  },\n  exit: {\n    duration: 0.1,\n    ease: EASINGS.easeIn\n  }\n};\nvar variants = {\n  initial: function initial(props) {\n    return {\n      opacity: 0,\n      x: props.offsetX,\n      y: props.offsetY,\n      transition: transitions.exit\n    };\n  },\n  exit: function exit(props) {\n    return _extends({\n      opacity: 0,\n      transition: transitions.exit\n    }, props.reverse && {\n      x: props.offsetX,\n      y: props.offsetY\n    }, !props.reverse && {\n      transitionEnd: {\n        x: props.offsetX,\n        y: props.offsetY\n      }\n    });\n  },\n  enter: {\n    opacity: 1,\n    x: 0,\n    y: 0,\n    transition: transitions.enter\n  }\n};\nexport var slideFadeConfig = {\n  initial: \"initial\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants: variants\n};\nexport var SlideFade = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var unmountOnExit = props.unmountOnExit,\n      isOpen = props.in,\n      _props$reverse = props.reverse,\n      reverse = _props$reverse === void 0 ? true : _props$reverse,\n      className = props.className,\n      _props$offsetX = props.offsetX,\n      offsetX = _props$offsetX === void 0 ? 0 : _props$offsetX,\n      _props$offsetY = props.offsetY,\n      offsetY = _props$offsetY === void 0 ? 8 : _props$offsetY,\n      rest = _objectWithoutPropertiesLoose(props, [\"unmountOnExit\", \"in\", \"reverse\", \"className\", \"offsetX\", \"offsetY\"]);\n\n  var shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true;\n  var custom = {\n    offsetX: offsetX,\n    offsetY: offsetY,\n    reverse: reverse\n  };\n  var motionProps = mergeWith(slideFadeConfig, {\n    custom: custom,\n    animate: isOpen || unmountOnExit ? \"enter\" : \"exit\"\n  });\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    custom: custom\n  }, shouldExpand && /*#__PURE__*/React.createElement(motion.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-offset-slide\", className)\n  }, motionProps, rest)));\n});\n\nif (__DEV__) {\n  SlideFade.displayName = \"SlideFade\";\n}","map":{"version":3,"sources":["../../src/slide-fade.tsx"],"names":["transitions","enter","duration","ease","EASINGS","easeOut","exit","easeIn","variants","initial","props","opacity","x","y","transition","offsetY","transitionEnd","slideFadeConfig","animate","SlideFade","in","reverse","offsetX","shouldExpand","unmountOnExit","isOpen","custom","motionProps","mergeWith","cx"],"mappings":"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","sourcesContent":["import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype SlideFadeVariant = MotionVariants<\"initial\" | \"enter\" | \"exit\">\n\nconst transitions = {\n  enter: {\n    duration: 0.2,\n    ease: EASINGS.easeOut,\n  },\n  exit: {\n    duration: 0.1,\n    ease: EASINGS.easeIn,\n  },\n}\n\nconst variants: SlideFadeVariant = {\n  initial: (props) => ({\n    opacity: 0,\n    x: props.offsetX,\n    y: props.offsetY,\n    transition: transitions.exit,\n  }),\n  exit: (props) => ({\n    opacity: 0,\n    transition: transitions.exit,\n    ...(props.reverse && {\n      x: props.offsetX,\n      y: props.offsetY,\n    }),\n    ...(!props.reverse && {\n      transitionEnd: {\n        x: props.offsetX,\n        y: props.offsetY,\n      },\n    }),\n  }),\n  enter: {\n    opacity: 1,\n    x: 0,\n    y: 0,\n    transition: transitions.enter,\n  },\n}\n\nexport const slideFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"initial\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface SlideFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The offset on the horizontal or `x` axis\n   * @default 0\n   */\n  offsetX?: string | number\n  /**\n   * The offset on the vertical or `y` axis\n   * @default 8\n   */\n  offsetY?: string | number\n  /**\n   * If `true`, the element will be transitioned back to the offset when it leaves.\n   * Otherwise, it'll only fade out\n   * @default true\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * If `true`, the content will animate in\n   */\n  in?: boolean\n}\n\nexport const SlideFade = React.forwardRef<HTMLDivElement, SlideFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      className,\n      offsetX = 0,\n      offsetY = 8,\n      ...rest\n    } = props\n\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    const custom = { offsetX, offsetY, reverse }\n    const motionProps = mergeWith(slideFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  SlideFade.displayName = \"SlideFade\"\n}\n"]},"metadata":{},"sourceType":"module"}