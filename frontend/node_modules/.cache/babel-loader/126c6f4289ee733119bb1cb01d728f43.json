{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { EASINGS } from \"./__utils\";\nvar variants = {\n  exit: function exit(props) {\n    return _extends({\n      opacity: 0\n    }, props.reverse ? {\n      scale: props.initialScale\n    } : {\n      transitionEnd: {\n        scale: props.initialScale\n      }\n    }, {\n      transition: {\n        duration: 0.1,\n        ease: EASINGS.easeOut\n      }\n    });\n  },\n  enter: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.25,\n      ease: EASINGS.easeInOut\n    }\n  }\n};\nexport var scaleFadeConfig = {\n  initial: \"exit\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants: variants\n};\nexport var ScaleFade = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var unmountOnExit = props.unmountOnExit,\n      isOpen = props.in,\n      _props$reverse = props.reverse,\n      reverse = _props$reverse === void 0 ? true : _props$reverse,\n      _props$initialScale = props.initialScale,\n      initialScale = _props$initialScale === void 0 ? 0.95 : _props$initialScale,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"unmountOnExit\", \"in\", \"reverse\", \"initialScale\", \"className\"]);\n\n  var show = unmountOnExit ? isOpen && unmountOnExit : true;\n  var custom = {\n    initialScale: initialScale,\n    reverse: reverse\n  };\n  var motionProps = mergeWith(scaleFadeConfig, {\n    custom: custom,\n    animate: isOpen || unmountOnExit ? \"enter\" : \"exit\"\n  });\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    custom: custom\n  }, show && /*#__PURE__*/React.createElement(motion.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-offset-slide\", className)\n  }, motionProps, rest)));\n});\n\nif (__DEV__) {\n  ScaleFade.displayName = \"ScaleFade\";\n}","map":{"version":3,"sources":["../../src/scale-fade.tsx"],"names":["variants","exit","props","opacity","scale","initialScale","transitionEnd","transition","duration","ease","EASINGS","easeOut","enter","easeInOut","scaleFadeConfig","initial","animate","ScaleFade","in","reverse","className","show","unmountOnExit","isOpen","custom","motionProps","mergeWith","cx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,EAAA,EAAA,SAAA,EAAA,OAAA,QAAA,kBAAA;AACA,SAAA,eAAA,EAAA,MAAA,QAAA,eAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,OAAA,QAAA,WAAA;AAIA,IAAMA,QAA2B,GAAG;AAClCC,EAAAA,IAAI,EAAGC,cAAAA,KAAD;AAAA,WAAA,QAAA,CAAA;AACJC,MAAAA,OAAO,EAAE;AADL,KAAA,EAEA,KAAK,CAAL,OAAA,GACA;AAAEC,MAAAA,KAAK,EAAEF,KAAK,CAACG;AAAf,KADA,GAEA;AAAEC,MAAAA,aAAa,EAAE;AAAEF,QAAAA,KAAK,EAAEF,KAAK,CAACG;AAAf;AAAjB,KAJA,EAAA;AAKJE,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EADE,GAAA;AAEVC,QAAAA,IAAI,EAAEC,OAAO,CAACC;AAFJ;AALR,KAAA,CAAA;AAAA,GAD4B;AAWlCC,EAAAA,KAAK,EAAE;AACLT,IAAAA,OAAO,EADF,CAAA;AAELC,IAAAA,KAAK,EAFA,CAAA;AAGLG,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EADE,IAAA;AAEVC,MAAAA,IAAI,EAAEC,OAAO,CAACG;AAFJ;AAHP;AAX2B,CAApC;AAqBA,OAAO,IAAMC,eAAuC,GAAG;AACrDC,EAAAA,OAAO,EAD8C,MAAA;AAErDC,EAAAA,OAAO,EAF8C,OAAA;AAGrDf,EAAAA,IAAI,EAHiD,MAAA;AAIrDD,EAAAA,QAAAA,EAAAA;AAJqD,CAAhD;AA2BP,OAAO,IAAMiB,SAAS,GAAA,aAAG,KAAK,CAAL,UAAA,CACvB,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MACR,aADQ,GACd,KADc,CACR,aADQ;AAAA,MACR,MADQ,GACd,KADc,CAGZC,EAHY;AAAA,uBACd,KADc,CAIZC,OAJY;AAAA,MAIZA,OAJY,+BACR,IADQ;AAAA,4BACd,KADc,CAKZd,YALY;AAAA,MAKZA,YALY,oCACR,IADQ;AAAA,MAMZe,SANY,GACd,KADc,CAMZA,SANY;AAAA,MACd,IADc,GACd,6BAAA,CAAA,KAAA,EAAA,CAAA,eAAA,EAAA,IAAA,EAAA,SAAA,EAAA,cAAA,EAAA,WAAA,CAAA,CADc;;AAUd,MAAMC,IAAI,GAAGC,aAAa,GAAGC,MAAM,IAAT,aAAA,GAA1B,IAAA;AACA,MAAMC,MAAM,GAAG;AAAEnB,IAAAA,YAAF,EAAEA,YAAF;AAAgBc,IAAAA,OAAAA,EAAAA;AAAhB,GAAf;AAEA,MAAMM,WAAW,GAAGC,SAAS,CAAA,eAAA,EAAkB;AAC7CF,IAAAA,MAD6C,EAC7CA,MAD6C;AAE7CR,IAAAA,OAAO,EAAEO,MAAM,IAANA,aAAAA,GAAAA,OAAAA,GAAoC;AAFA,GAAlB,CAA7B;AAKA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,IAAA,MAAM,EAAEC;AAAzB,GAAA,EACGH,IAAI,IAAA,aACH,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,SAAS,EAAEM,EAAE,CAAA,qBAAA,EAAA,SAAA;AAFf,GAAA,EAAA,WAAA,EAHN,IAGM,CAAA,CAFJ,CADF;AAnBG,CAAkB,CAAlB;;AAkCP,IAAA,OAAA,EAAa;AACXV,EAAAA,SAAS,CAATA,WAAAA,GAAAA,WAAAA;AACD","sourcesContent":["import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype ScaleFadeVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: ScaleFadeVariants = {\n  exit: (props) => ({\n    opacity: 0,\n    ...(props.reverse\n      ? { scale: props.initialScale }\n      : { transitionEnd: { scale: props.initialScale } }),\n    transition: {\n      duration: 0.1,\n      ease: EASINGS.easeOut,\n    },\n  }),\n  enter: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.25,\n      ease: EASINGS.easeInOut,\n    },\n  },\n}\n\nexport const scaleFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"exit\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface ScaleFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The initial scale of the element\n   * @default 0.95\n   */\n  initialScale?: number\n  /**\n   * If `true`, the element will transition back to exit state\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in?: boolean\n}\n\nexport const ScaleFade = React.forwardRef<HTMLDivElement, ScaleFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      initialScale = 0.95,\n      className,\n      ...rest\n    } = props\n\n    const show = unmountOnExit ? isOpen && unmountOnExit : true\n    const custom = { initialScale, reverse }\n\n    const motionProps = mergeWith(scaleFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {show && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  ScaleFade.displayName = \"ScaleFade\"\n}\n"]},"metadata":{},"sourceType":"module"}