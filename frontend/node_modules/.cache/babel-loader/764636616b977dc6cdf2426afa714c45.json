{"ast":null,"code":"import { useRef, useMemo, createElement, useEffect, cloneElement } from 'react';\nimport { render } from 'react-dom';\nimport { VisuallyHidden } from '@reach/visually-hidden';\nimport { forwardRefWithAs, useForkedRef, usePrevious, getOwnerDocument } from '@reach/utils';\nimport PropTypes from 'prop-types';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/*\r\n * Singleton state is fine because you don't server render\r\n * an alert (SRs don't read them on first load anyway)\r\n */\n\n\nvar keys = {\n  polite: -1,\n  assertive: -1\n};\nvar elements = {\n  polite: {},\n  assertive: {}\n};\nvar liveRegions = {\n  polite: null,\n  assertive: null\n};\nvar renderTimer; ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Alert\r\n *\r\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\r\n * messages when network events or other things happen. Users with assistive\r\n * technologies may not know about the message unless you develop for it.\r\n *\r\n * @see Docs https://reach.tech/alert\r\n */\n\nvar Alert = /*#__PURE__*/forwardRefWithAs(function Alert(_ref, forwardedRef) {\n  var _ref$as = _ref.as,\n      Comp = _ref$as === void 0 ? \"div\" : _ref$as,\n      children = _ref.children,\n      _ref$type = _ref.type,\n      regionType = _ref$type === void 0 ? \"polite\" : _ref$type,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"children\", \"type\"]);\n\n  var ownRef = useRef(null);\n  var ref = useForkedRef(forwardedRef, ownRef);\n  var child = useMemo(function () {\n    return createElement(Comp, Object.assign({}, props, {\n      ref: ref,\n      \"data-reach-alert\": true\n    }), children);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [children, props]);\n  useMirrorEffects(regionType, child, ownRef);\n  return child;\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Alert.displayName = \"Alert\";\n  Alert.propTypes = {\n    children: PropTypes.node,\n    type: /*#__PURE__*/PropTypes.oneOf([\"assertive\", \"polite\"])\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nfunction createMirror(type, doc) {\n  var key = ++keys[type];\n\n  var mount = function mount(element) {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      var node = doc.createElement(\"div\");\n      node.setAttribute(\"data-reach-live-\" + type, \"true\");\n      liveRegions[type] = node;\n      doc.body.appendChild(liveRegions[type]);\n      mount(element);\n    }\n  };\n\n  var update = function update(element) {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  var unmount = function unmount() {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount\n  };\n}\n\nfunction renderAlerts() {\n  if (renderTimer != null) {\n    window.clearTimeout(renderTimer);\n  }\n\n  renderTimer = window.setTimeout(function () {\n    Object.keys(elements).forEach(function (elementType) {\n      var regionType = elementType;\n      var container = liveRegions[regionType];\n\n      if (container) {\n        render(createElement(VisuallyHidden, {\n          as: \"div\"\n        }, createElement(\"div\", {\n          // The status role is a type of live region and a container whose\n          // content is advisory information for the user that is not\n          // important enough to justify an alert, and is often presented as\n          // a status bar. When the role is added to an element, the browser\n          // will send out an accessible status event to assistive\n          // technology products which can then notify the user about it.\n          // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n          role: regionType === \"assertive\" ? \"alert\" : \"status\",\n          \"aria-live\": regionType\n        }, Object.keys(elements[regionType]).map(function (key) {\n          return cloneElement(elements[regionType][key], {\n            key: key,\n            ref: null\n          });\n        }))), liveRegions[regionType]);\n      }\n    });\n  }, 500);\n}\n\nfunction useMirrorEffects(regionType, element, ref) {\n  var prevType = usePrevious(regionType);\n  var mirror = useRef(null);\n  var mounted = useRef(false);\n  useEffect(function () {\n    var ownerDocument = getOwnerDocument(ref.current);\n\n    if (!mounted.current) {\n      mounted.current = true;\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else if (prevType !== regionType) {\n      mirror.current && mirror.current.unmount();\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else {\n      mirror.current && mirror.current.update(element);\n    }\n  }, [element, regionType, prevType, ref]);\n  useEffect(function () {\n    return function () {\n      mirror.current && mirror.current.unmount();\n    };\n  }, []);\n}\n\nexport default Alert;\nexport { Alert };","map":{"version":3,"sources":["../src/index.tsx"],"names":["keys","polite","assertive","elements","liveRegions","Alert","forwardRefWithAs","as","Comp","children","type","regionType","props","ownRef","React","ref","useForkedRef","child","useMirrorEffects","PropTypes","key","mount","renderAlerts","node","doc","update","unmount","renderTimer","window","Object","container","ReactDOM","role","prevType","usePrevious","mirror","mounted","ownerDocument","getOwnerDocument","createMirror"],"mappings":";;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;AAIA,IAAIA,IAAI,GAAe;AACrBC,EAAAA,MAAM,EAAE,CADa,CAAA;AAErBC,EAAAA,SAAS,EAAE,CAAC;AAFS,CAAvB;AAKA,IAAIC,QAAQ,GAAiB;AAC3BF,EAAAA,MAAM,EADqB,EAAA;AAE3BC,EAAAA,SAAS,EAAE;AAFgB,CAA7B;AAKA,IAAIE,WAAW,GAAmB;AAChCH,EAAAA,MAAM,EAD0B,IAAA;AAEhCC,EAAAA,SAAS,EAAE;AAFqB,CAAlC;AAKA,IAAA,WAAA,C,CAAA;;AAIA;;;;;;;;;;IASMG,KAAK,GAAA,aAAGC,gBAAgB,CAAoB,SAAA,KAAA,CAAA,IAAA,EAAA,YAAA,EAAA;qBAC9CC,E;MAAIC,IAAAA,GAAAA,OAAAA,KAAAA,KAAAA,CAAAA,GAAO,KAAPA,GAAO,O;MAAOC,QAAAA,GAAAA,IAAAA,CAAAA,Q;uBAAUC,I;MAAMC,UAAAA,GAAAA,SAAAA,KAAAA,KAAAA,CAAAA,GAAa,QAAbA,GAAa,S;MAAaC,KAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,MAAAA,CAAAA,C;;AAG9D,MAAMC,MAAM,GAAGC,MAAAA,CAAf,IAAeA,CAAf;AACA,MAAMC,GAAG,GAAGC,YAAY,CAAA,YAAA,EAAxB,MAAwB,CAAxB;AACA,MAAMC,KAAK,GAAG,OAAA,CACZ,YAAA;AAAA,WACE,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAUL,KAAV,EAAUA;AAAOG,MAAAA,GAAG,EAAEA,GAAZH;;AAAAA,KAAV,CAAA,EADF,QACE,CADF;AADY,GAAA,EAAA;AAOZ,GAAA,QAAA,EAPF,KAOE,CAPY,CAAd;AASAM,EAAAA,gBAAgB,CAAA,UAAA,EAAA,KAAA,EAAhBA,MAAgB,CAAhBA;AAEA,SAAA,KAAA;AAjB4B,CAAA,C;;AAkC9B,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;AACXb,EAAAA,KAAK,CAALA,WAAAA,GAAAA,OAAAA;AACAA,EAAAA,KAAK,CAALA,SAAAA,GAAkB;AAChBI,IAAAA,QAAQ,EAAEU,SAAS,CADH,IAAA;AAEhBT,IAAAA,IAAI,EAAA,aAAES,SAAS,CAATA,KAAAA,CAAgB,CAAA,WAAA,EAAhBA,QAAgB,CAAhBA;AAFU,GAAlBd;AAID,C,CAAA;;;AAID,SAAA,YAAA,CAAA,IAAA,EAAA,GAAA,EAAA;AACE,MAAIe,GAAG,GAAG,EAAEpB,IAAI,CAAhB,IAAgB,CAAhB;;AAEA,MAAIqB,KAAK,GAAG,SAARA,KAAQ,CAAA,OAAA,EAAA;AACV,QAAIjB,WAAW,CAAf,IAAe,CAAf,EAAuB;AACrBD,MAAAA,QAAQ,CAARA,IAAQ,CAARA,CAAAA,GAAAA,IAAAA,OAAAA;AACAmB,MAAAA,YAAY;AAFd,KAAA,MAGO;AACL,UAAIC,IAAI,GAAGC,GAAG,CAAHA,aAAAA,CAAX,KAAWA,CAAX;AACAD,MAAAA,IAAI,CAAJA,YAAAA,CAAAA,qBAAAA,IAAAA,EAAAA,MAAAA;AACAnB,MAAAA,WAAW,CAAXA,IAAW,CAAXA,GAAAA,IAAAA;AACAoB,MAAAA,GAAG,CAAHA,IAAAA,CAAAA,WAAAA,CAAqBpB,WAAW,CAAhCoB,IAAgC,CAAhCA;AACAH,MAAAA,KAAK,CAALA,OAAK,CAALA;AACD;AAVH,GAAA;;AAaA,MAAII,MAAM,GAAG,SAATA,MAAS,CAAA,OAAA,EAAA;AACXtB,IAAAA,QAAQ,CAARA,IAAQ,CAARA,CAAAA,GAAAA,IAAAA,OAAAA;AACAmB,IAAAA,YAAY;AAFd,GAAA;;AAKA,MAAII,OAAO,GAAG,SAAVA,OAAU,GAAA;AACZ,WAAOvB,QAAQ,CAARA,IAAQ,CAARA,CAAP,GAAOA,CAAP;AACAmB,IAAAA,YAAY;AAFd,GAAA;;AAKA,SAAO;AAAED,IAAAA,KAAK,EAAP,KAAA;AAASI,IAAAA,MAAM,EAAf,MAAA;AAAiBC,IAAAA,OAAO,EAAPA;AAAjB,GAAP;AACD;;AAED,SAAA,YAAA,GAAA;AACE,MAAIC,WAAW,IAAf,IAAA,EAAyB;AACvBC,IAAAA,MAAM,CAANA,YAAAA,CAAAA,WAAAA;AACD;;AACDD,EAAAA,WAAW,GAAG,MAAM,CAAN,UAAA,CAAkB,YAAA;AAC9BE,IAAAA,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAA8B,UAAA,WAAA,EAAA;AAC5B,UAAIlB,UAAU,GAAd,WAAA;AACA,UAAImB,SAAS,GAAG1B,WAAW,CAA3B,UAA2B,CAA3B;;AACA,UAAA,SAAA,EAAe;AACb2B,QAAAA,MAAAA,CACE,aAAA,CAAA,cAAA,EAAA;AAAgBxB,UAAAA,EAAE,EAAC;AAAnB,SAAA,EACE,aAAA,CAAA,KAAA,EAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACAyB,UAAAA,IAAI,EAAErB,UAAU,KAAVA,WAAAA,GAAAA,OAAAA,GAAuC,QAR/C;uBASaA;AATb,SAAA,EAWG,MAAM,CAAN,IAAA,CAAYR,QAAQ,CAApB,UAAoB,CAApB,EAAA,GAAA,CAAsC,UAAA,GAAA,EAAA;AAAA,iBACrC,YAAA,CAAmBA,QAAQ,CAARA,UAAQ,CAARA,CAAnB,GAAmBA,CAAnB,EAA8C;AAC5CiB,YAAAA,GAAG,EADyC,GAAA;AAE5CL,YAAAA,GAAG,EAAE;AAFuC,WAA9C,CADqC;AAb7CgB,SAaO,CAXH,CADF,CADFA,EAqBE3B,WAAW,CArBb2B,UAqBa,CArBbA,CAAAA;AAuBD;AA3BHF,KAAAA;AADY,GAAA,EAAdF,GAAc,CAAdA;AA+BD;;AAED,SAAA,gBAAA,CAAA,UAAA,EAAA,OAAA,EAAA,GAAA,EAAA;AAKE,MAAMM,QAAQ,GAAGC,WAAW,CAA5B,UAA4B,CAA5B;AACA,MAAMC,MAAM,GAAGrB,MAAAA,CAAf,IAAeA,CAAf;AACA,MAAMsB,OAAO,GAAGtB,MAAAA,CAAhB,KAAgBA,CAAhB;AACAA,EAAAA,SAAAA,CAAgB,YAAA;AACd,QAAMuB,aAAa,GAAGC,gBAAgB,CAACvB,GAAG,CAA1C,OAAsC,CAAtC;;AAEA,QAAI,CAACqB,OAAO,CAAZ,OAAA,EAAsB;AACpBA,MAAAA,OAAO,CAAPA,OAAAA,GAAAA,IAAAA;AACAD,MAAAA,MAAM,CAANA,OAAAA,GAAiBI,YAAY,CAAA,UAAA,EAA7BJ,aAA6B,CAA7BA;AACAA,MAAAA,MAAM,CAANA,OAAAA,CAAAA,KAAAA,CAAAA,OAAAA;AAHF,KAAA,MAIO,IAAIF,QAAQ,KAAZ,UAAA,EAA6B;AAClCE,MAAAA,MAAM,CAANA,OAAAA,IAAkBA,MAAM,CAANA,OAAAA,CAAlBA,OAAkBA,EAAlBA;AACAA,MAAAA,MAAM,CAANA,OAAAA,GAAiBI,YAAY,CAAA,UAAA,EAA7BJ,aAA6B,CAA7BA;AACAA,MAAAA,MAAM,CAANA,OAAAA,CAAAA,KAAAA,CAAAA,OAAAA;AAHK,KAAA,MAIA;AACLA,MAAAA,MAAM,CAANA,OAAAA,IAAkBA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,CAAlBA,OAAkBA,CAAlBA;AACD;AAbHrB,GAAAA,EAcG,CAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAdHA,GAcG,CAdHA,CAAAA;AAgBAA,EAAAA,SAAAA,CAAgB,YAAA;AACd,WAAO,YAAA;AACLqB,MAAAA,MAAM,CAANA,OAAAA,IAAkBA,MAAM,CAANA,OAAAA,CAAlBA,OAAkBA,EAAlBA;AADF,KAAA;AADFrB,GAAAA,EAAAA,EAAAA,CAAAA;AAKD","sourcesContent":["/**\n * Welcome to @reach/alert!\n *\n * An alert is an element that displays a brief, important message in a way that\n * attracts the user's attention without interrupting the user's task.\n * Dynamically rendered alerts are automatically announced by most screen\n * readers, and in some operating systems, they may trigger an alert sound.\n *\n * The approach here is to allow developers to render a visual <Alert> and then\n * we mirror that to a couple of aria-live regions behind the scenes. This way,\n * most of the time, developers don't have to think about visual vs. aria\n * alerts.\n *\n * Limitations: Developers can't read from context inside of an Alert because\n * we aren't using ReactDOM.createPortal(), we're actually creating a couple of\n * brand new React roots. We could use createPortal but then apps would need to\n * render the entire app tree in an <AlertProvider>, or maybe there's a way\n * with default context to do it, but we haven't explored that yet. So, we'll\n * see how this goes. If it becomes a problem we can introduce a portal later.\n *\n * @see Docs     https://reach.tech/alert\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/alert\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alert\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { VisuallyHidden } from \"@reach/visually-hidden\";\nimport {\n  forwardRefWithAs,\n  getOwnerDocument,\n  usePrevious,\n  useForkedRef,\n} from \"@reach/utils\";\nimport PropTypes from \"prop-types\";\n\n/*\n * Singleton state is fine because you don't server render\n * an alert (SRs don't read them on first load anyway)\n */\nlet keys: RegionKeys = {\n  polite: -1,\n  assertive: -1,\n};\n\nlet elements: ElementTypes = {\n  polite: {},\n  assertive: {},\n};\n\nlet liveRegions: RegionElements = {\n  polite: null,\n  assertive: null,\n};\n\nlet renderTimer: number | null;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Alert\n *\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\n * messages when network events or other things happen. Users with assistive\n * technologies may not know about the message unless you develop for it.\n *\n * @see Docs https://reach.tech/alert\n */\nconst Alert = forwardRefWithAs<AlertProps, \"div\">(function Alert(\n  { as: Comp = \"div\", children, type: regionType = \"polite\", ...props },\n  forwardedRef\n) {\n  const ownRef = React.useRef<HTMLDivElement>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const child = React.useMemo(\n    () => (\n      <Comp {...props} ref={ref} data-reach-alert>\n        {children}\n      </Comp>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [children, props]\n  );\n  useMirrorEffects(regionType, child, ownRef);\n\n  return child;\n});\n\n/**\n * @see Docs https://reach.tech/alert#alert-props\n */\ntype AlertProps = {\n  /**\n   * Controls whether the assistive technology should read immediately\n   * (\"assertive\") or wait until the user is idle (\"polite\").\n   *\n   * @see Docs https://reach.tech/alert#alert-type\n   */\n  type?: \"assertive\" | \"polite\";\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  Alert.displayName = \"Alert\";\n  Alert.propTypes = {\n    children: PropTypes.node,\n    type: PropTypes.oneOf([\"assertive\", \"polite\"]),\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createMirror(type: \"polite\" | \"assertive\", doc: Document): Mirror {\n  let key = ++keys[type];\n\n  let mount = (element: JSX.Element) => {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      let node = doc.createElement(\"div\");\n      node.setAttribute(`data-reach-live-${type}`, \"true\");\n      liveRegions[type] = node;\n      doc.body.appendChild(liveRegions[type]!);\n      mount(element);\n    }\n  };\n\n  let update = (element: JSX.Element) => {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  let unmount = () => {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return { mount, update, unmount };\n}\n\nfunction renderAlerts() {\n  if (renderTimer != null) {\n    window.clearTimeout(renderTimer);\n  }\n  renderTimer = window.setTimeout(() => {\n    Object.keys(elements).forEach((elementType) => {\n      let regionType: RegionTypes = elementType as RegionTypes;\n      let container = liveRegions[regionType]!;\n      if (container) {\n        ReactDOM.render(\n          <VisuallyHidden as=\"div\">\n            <div\n              // The status role is a type of live region and a container whose\n              // content is advisory information for the user that is not\n              // important enough to justify an alert, and is often presented as\n              // a status bar. When the role is added to an element, the browser\n              // will send out an accessible status event to assistive\n              // technology products which can then notify the user about it.\n              // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n              role={regionType === \"assertive\" ? \"alert\" : \"status\"}\n              aria-live={regionType}\n            >\n              {Object.keys(elements[regionType]).map((key) =>\n                React.cloneElement(elements[regionType][key], {\n                  key,\n                  ref: null,\n                })\n              )}\n            </div>\n          </VisuallyHidden>,\n          liveRegions[regionType]\n        );\n      }\n    });\n  }, 500);\n}\n\nfunction useMirrorEffects(\n  regionType: RegionTypes,\n  element: JSX.Element,\n  ref: React.RefObject<Element>\n) {\n  const prevType = usePrevious<RegionTypes>(regionType);\n  const mirror = React.useRef<Mirror | null>(null);\n  const mounted = React.useRef(false);\n  React.useEffect(() => {\n    const ownerDocument = getOwnerDocument(ref.current)!;\n\n    if (!mounted.current) {\n      mounted.current = true;\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else if (prevType !== regionType) {\n      mirror.current && mirror.current.unmount();\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else {\n      mirror.current && mirror.current.update(element);\n    }\n  }, [element, regionType, prevType, ref]);\n\n  React.useEffect(() => {\n    return () => {\n      mirror.current && mirror.current.unmount();\n    };\n  }, []);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype Mirror = {\n  mount: (element: JSX.Element) => void;\n  update: (element: JSX.Element) => void;\n  unmount: () => void;\n};\n\ntype RegionTypes = \"polite\" | \"assertive\";\n\ntype ElementTypes = {\n  [key in RegionTypes]: {\n    [key: string]: JSX.Element;\n  };\n};\n\ntype RegionElements<T extends HTMLElement = HTMLDivElement> = {\n  [key in RegionTypes]: T | null;\n};\n\ntype RegionKeys = {\n  [key in RegionTypes]: number;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { AlertProps };\nexport { Alert };\nexport default Alert;\n"]},"metadata":{},"sourceType":"module"}