{"ast":null,"code":"import { __assign } from 'tslib';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.js';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.js';\nimport { useConstant } from '../../../utils/use-constant.js';\n\nfunction useInitialMotionValues(visualElement) {\n  var createStyle = function createStyle() {\n    var _a = visualElement.build(),\n        vars = _a.vars,\n        style = _a.style;\n\n    return __assign(__assign({}, vars), style);\n  };\n\n  return visualElement.isStatic ? createStyle() : useConstant(createStyle);\n}\n\nfunction useStyle(visualElement, props) {\n  var styleProp = props.style || {};\n  var style = {};\n  /**\n   * Copy non-Motion Values straight into style\n   */\n\n  for (var key in styleProp) {\n    // TODO We might want this to be a hasValue check? Although this could be impure\n    if (!isMotionValue(styleProp[key]) && !isForcedMotionValue(key, props)) {\n      style[key] = styleProp[key];\n    }\n  }\n\n  style = __assign(__assign({}, style), useInitialMotionValues(visualElement));\n\n  if (props.transformValues) {\n    style = props.transformValues(style);\n  }\n\n  return style;\n}\n\nfunction useHTMLProps(visualElement, props) {\n  // The `any` isn't ideal but it is the type of createElement props argument\n  var htmlProps = {};\n  var style = useStyle(visualElement, props);\n\n  if (Boolean(props.drag)) {\n    // Disable the ghost element when a user drags\n    htmlProps.draggable = false; // Disable text selection\n\n    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\"; // Disable scrolling on the draggable direction\n\n    style.touchAction = props.drag === true ? \"none\" : \"pan-\" + (props.drag === \"x\" ? \"y\" : \"x\");\n  }\n\n  htmlProps.style = style;\n  return htmlProps;\n}\n\nexport { useHTMLProps, useStyle };","map":null,"metadata":{},"sourceType":"module"}