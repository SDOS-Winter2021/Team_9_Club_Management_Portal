{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var Switch = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useCheckbox = useCheckbox(ownProps),\n      state = _useCheckbox.state,\n      getInputProps = _useCheckbox.getInputProps,\n      getCheckboxProps = _useCheckbox.getCheckboxProps,\n      htmlProps = _useCheckbox.htmlProps;\n\n  var inputProps = getInputProps({}, ref);\n  var checkboxProps = getCheckboxProps();\n  var labelStyles = {\n    display: \"inline-block\",\n    verticalAlign: \"middle\",\n    lineHeight: \"normal\"\n  };\n\n  var trackStyles = _extends({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\"\n  }, styles.track);\n\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, htmlProps, {\n    className: cx(\"chakra-switch\", props.className),\n    __css: labelStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-switch__input\"\n  }, inputProps)), /*#__PURE__*/React.createElement(chakra.span, _extends({}, checkboxProps, {\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })));\n});\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\";\n}","map":null,"metadata":{},"sourceType":"module"}