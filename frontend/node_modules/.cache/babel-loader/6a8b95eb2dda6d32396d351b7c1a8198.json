{"ast":null,"code":"import _slicedToArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Modal, ModalFocusScope, useModalContext } from \"./modal\";\n\nvar _createContext = createContext(),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    DrawerContextProvider = _createContext2[0],\n    useDrawerContext = _createContext2[1];\n\nexport function Drawer(props) {\n  var _theme$components;\n\n  var isOpen = props.isOpen,\n      onClose = props.onClose,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"right\" : _props$placement,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  return /*#__PURE__*/React.createElement(DrawerContextProvider, {\n    value: {\n      placement: placement\n    }\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n}\nvar StyleSlide = chakra(Slide);\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\n\nexport var DrawerContent = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var _useModalContext = useModalContext(),\n      getDialogProps = _useModalContext.getDialogProps,\n      getDialogContainerProps = _useModalContext.getDialogContainerProps,\n      isOpen = _useModalContext.isOpen;\n\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps();\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var _useDrawerContext = useDrawerContext(),\n      placement = _useDrawerContext.placement;\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(StyleSlide, _extends({\n    direction: placement,\n    in: isOpen,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\";\n}\n\nexport { ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay } from \"./modal\";","map":null,"metadata":{},"sourceType":"module"}