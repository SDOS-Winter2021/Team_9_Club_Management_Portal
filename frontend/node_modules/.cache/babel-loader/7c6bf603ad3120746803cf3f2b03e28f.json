{"ast":null,"code":"import { __spread, __assign } from 'tslib';\nimport { useContext, createElement } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\n/**\n * Load features via renderless components based on the provided MotionProps.\n * TODO: Look into porting this to a component-less appraoch.\n */\n\nfunction useFeatures(defaultFeatures, isStatic, visualElement, props) {\n  var plugins = useContext(MotionConfigContext); // If this is a static component, or we're rendering on the server, we don't load\n  // any feature components\n\n  if (isStatic || typeof window === \"undefined\") return null;\n\n  var allFeatures = __spread(defaultFeatures, plugins.features);\n\n  var numFeatures = allFeatures.length;\n  var features = []; // Decide which features we should render and add them to the returned array\n\n  for (var i = 0; i < numFeatures; i++) {\n    var _a = allFeatures[i],\n        shouldRender = _a.shouldRender,\n        key = _a.key,\n        getComponent = _a.getComponent;\n\n    if (shouldRender(props)) {\n      var Component = getComponent(props);\n      Component && features.push(createElement(Component, __assign({\n        key: key\n      }, props, {\n        visualElement: visualElement\n      })));\n    }\n  }\n\n  return features;\n}\n\nexport { useFeatures };","map":null,"metadata":{},"sourceType":"module"}