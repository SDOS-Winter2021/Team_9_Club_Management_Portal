{"ast":null,"code":"import { __read } from 'tslib';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { useContext, useEffect } from 'react';\nimport { PresenceContext } from '../../components/AnimatePresence/PresenceContext.js';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\nimport { checkShouldInheritVariant } from '../utils/should-inherit-variant.js';\n/**\n * TODO: This component is quite small and no longer directly imports animation code.\n * It could be a candidate for folding back into the main `motion` component.\n */\n\nvar ExitComponent = makeRenderlessComponent(function (props) {\n  var custom = props.custom,\n      visualElement = props.visualElement;\n\n  var _a = __read(usePresence(), 2),\n      isPresent = _a[0],\n      onExitComplete = _a[1];\n\n  var presenceContext = useContext(PresenceContext);\n  useEffect(function () {\n    var _a, _b;\n\n    var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Exit, !isPresent, {\n      custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom\n    });\n    !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));\n  }, [isPresent]);\n});\n/**\n * @public\n */\n\nvar Exit = {\n  key: \"exit\",\n  shouldRender: function shouldRender(props) {\n    return !!props.exit && !checkShouldInheritVariant(props);\n  },\n  getComponent: function getComponent() {\n    return ExitComponent;\n  }\n};\nexport { Exit };","map":null,"metadata":{},"sourceType":"module"}