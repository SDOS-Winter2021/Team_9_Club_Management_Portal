{"ast":null,"code":"import _slicedToArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useSafeLayoutEffect, useForceUpdate } from \"@chakra-ui/hooks\";\nexport function useDescendant(props) {\n  var context = props.context,\n      element = props.element,\n      indexProp = props.index,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      rest = _objectWithoutPropertiesLoose(props, [\"context\", \"element\", \"index\", \"disabled\", \"focusable\"]);\n\n  var forceUpdate = useForceUpdate();\n  var register = context.register,\n      unregister = context.unregister,\n      descendants = context.descendants;\n  useSafeLayoutEffect(function () {\n    if (!element) {\n      forceUpdate();\n    }\n    /**\n     * Don't register this descendant if it is disabled and not focusable\n     */\n\n\n    if (disabled && !focusable) return undefined;\n    /**\n     * else, register the descendant\n     */\n\n    register(_extends({\n      element: element,\n      disabled: disabled,\n      focusable: focusable\n    }, rest));\n    /**\n     * when it unmounts, unregister the descendant\n     */\n\n    return function () {\n      if (element) {\n        unregister(element);\n      }\n    }; // eslint-disable-next-line\n  }, [element, disabled, focusable].concat(_toConsumableArray(Object.values(rest))));\n  var index = indexProp != null ? indexProp : descendants.findIndex(function (descendant) {\n    return descendant.element === element;\n  });\n  return index;\n}\nexport function useDescendants() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      descendants = _useState2[0],\n      setDescendants = _useState2[1];\n\n  var register = useCallback(function (_ref) {\n    var element = _ref.element,\n        rest = _objectWithoutPropertiesLoose(_ref, [\"element\"]);\n\n    if (!element) return; // @ts-ignore\n\n    setDescendants(function (prevDescendants) {\n      if (prevDescendants.find(function (item) {\n        return item.element === element;\n      }) == null) {\n        var index = prevDescendants.findIndex(function (item) {\n          if (!item.element || !element) return false;\n          return Boolean(item.element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING);\n        });\n\n        var newItem = _extends({\n          element: element\n        }, rest);\n\n        if (index === -1) {\n          return [].concat(_toConsumableArray(prevDescendants), [newItem]);\n        }\n\n        return [].concat(_toConsumableArray(prevDescendants.slice(0, index)), [newItem], _toConsumableArray(prevDescendants.slice(index)));\n      }\n\n      return prevDescendants;\n    });\n  }, []);\n  var unregister = useCallback(function (element) {\n    if (!element) return;\n    setDescendants(function (descendants) {\n      return descendants.filter(function (descendant) {\n        return element !== descendant.element;\n      });\n    });\n  }, []);\n  var context = useMemo(function () {\n    return {\n      descendants: descendants,\n      register: register,\n      unregister: unregister\n    };\n  }, [descendants, register, unregister]);\n  return context;\n}","map":null,"metadata":{},"sourceType":"module"}