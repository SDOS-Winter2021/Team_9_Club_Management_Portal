{"ast":null,"code":"import _toArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { isCssVar, isObject, pick, analyzeBreakpoints } from \"@chakra-ui/utils\";\n\nvar replaceWhiteSpace = function replaceWhiteSpace(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = \"-\";\n  }\n\n  return value.replace(/\\s+/g, replaceValue);\n};\n\nvar escape = function escape(value) {\n  var valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  var isDecimal = !Number.isInteger(parseFloat(value.toString()));\n  return isDecimal ? valueStr.replace(\".\", \"\\\\.\") : value;\n};\n\nexport var toVarDefinition = function toVarDefinition(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n\n  return \"--\" + [prefix, escape(value)].filter(Boolean).join(\"-\");\n};\nexport var toVarReference = function toVarReference(value) {\n  return \"var(\" + escape(value) + \")\";\n};\nexport var toNegativeVar = function toNegativeVar(value) {\n  return \"calc(\" + escape(value) + \" * -1)\";\n};\nexport var tokens = [\"colors\", \"borders\", \"borderWidths\", \"borderStyles\", \"fonts\", \"fontSizes\", \"fontWeights\", \"letterSpacings\", \"lineHeights\", \"radii\", \"space\", \"shadows\", \"sizes\", \"zIndices\", \"transition\"];\n\nfunction extractTokens(theme) {\n  var _tokens = tokens;\n  return pick(theme, _tokens);\n}\n\nfunction omitVars(rawTheme) {\n  var cleanTheme = _objectWithoutPropertiesLoose(rawTheme, [\"__cssMap\", \"__cssVars\", \"__breakpoints\"]);\n\n  return cleanTheme;\n}\n/**\n * The CSS transform order following the upcoming spec from CSSWG\n * translate => rotate => scale => skew\n * @see https://drafts.csswg.org/css-transforms-2/#ctm\n * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/\n */\n\n\nvar transformTemplate = [\"rotate(var(--chakra-rotate, 0))\", \"scaleX(var(--chakra-scale-x, 1))\", \"scaleY(var(--chakra-scale-y, 1))\", \"skewX(var(--chakra-skew-x, 0))\", \"skewY(var(--chakra-skew-y, 0))\"];\nexport function getTransformTemplate() {\n  return [\"translateX(var(--chakra-translate-x, 0))\", \"translateY(var(--chakra-translate-y, 0))\"].concat(transformTemplate).join(\" \");\n}\nexport function getTransformGpuTemplate() {\n  return [\"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\"].concat(transformTemplate).join(\" \");\n}\nexport function toCSSVar(rawTheme) {\n  var _theme$config;\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n\n\n  var theme = omitVars(rawTheme); // omit components and breakpoints from css variable map\n\n  var tokens = extractTokens(theme);\n  var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;\n\n  var _toProperties = toProperties(tokens, {\n    cssVarPrefix: cssVarPrefix\n  }),\n      cssMap = _toProperties.cssMap,\n      cssVars = _toProperties.cssVars;\n\n  var defaultCssVars = {\n    \"--chakra-ring-offset\": \"0px\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-width\": \"3px\",\n    \"--chakra-ring-inset\": \"var(--chakra-empty, /*!*/ /*!*/)\",\n    \"--chakra-ring-offset-shadow\": \"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)\",\n    \"--chakra-ring-shadow\": \"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)\",\n    \"--chakra-ring\": \"var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent\",\n    \"--chakra-transform-gpu\": getTransformGpuTemplate(),\n    \"--chakra-transform\": getTransformTemplate(),\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\"\n  };\n  Object.assign(theme, {\n    __cssVars: _extends({}, defaultCssVars, cssVars),\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints)\n  });\n  return theme;\n}\n\nfunction toProperties(target, options, initialContext, prefixes) {\n  if (prefixes === void 0) {\n    prefixes = [];\n  }\n\n  var context = {\n    cssMap: _extends({}, initialContext == null ? void 0 : initialContext.cssMap),\n    cssVars: _extends({}, initialContext == null ? void 0 : initialContext.cssVars)\n  };\n  return Object.entries(target).reduce(function (properties, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (isObject(value) || Array.isArray(value)) {\n      var nested = toProperties(value, options, properties, prefixes.concat(key));\n      Object.assign(properties.cssVars, nested.cssVars);\n      Object.assign(properties.cssMap, nested.cssMap);\n    } else {\n      var _tokenHandlerMap$firs;\n\n      var finalKey = prefixes.concat(key); // firstKey will be e.g. \"space\"\n\n      var _finalKey = _slicedToArray(finalKey, 1),\n          firstKey = _finalKey[0];\n\n      var handler = (_tokenHandlerMap$firs = tokenHandlerMap[firstKey]) != null ? _tokenHandlerMap$firs : tokenHandlerMap.defaultHandler;\n\n      var _handler = handler(finalKey, value, options),\n          cssVars = _handler.cssVars,\n          cssMap = _handler.cssMap;\n\n      Object.assign(properties.cssVars, cssVars);\n      Object.assign(properties.cssMap, cssMap);\n    }\n\n    return properties;\n  }, context);\n}\n/**\n * Define transformation handlers for ThemeScale\n */\n\n\nvar tokenHandlerMap = {\n  space: function space(keys, value, options) {\n    var properties = tokenHandlerMap.defaultHandler(keys, value, options);\n\n    var _keys = _toArray(keys),\n        firstKey = _keys[0],\n        referenceKeys = _keys.slice(1);\n\n    var negativeLookupKey = firstKey + \".-\" + referenceKeys.join(\".\");\n    var negativeVarKey = keys.join(\"-\");\n    var cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix);\n    var negativeValue = isCssVar(String(value)) ? toNegativeVar(String(value)) : \"-\" + value;\n    var varRef = toNegativeVar(toVarReference(cssVar));\n    return {\n      cssVars: properties.cssVars,\n      cssMap: _extends({}, properties.cssMap, {\n        [negativeLookupKey]: {\n          value: negativeValue,\n          var: cssVar,\n          varRef: varRef\n        }\n      })\n    };\n  },\n  defaultHandler: function defaultHandler(keys, value, options) {\n    var lookupKey = keys.join(\".\");\n    var varKey = keys.join(\"-\");\n    var cssVar = toVarDefinition(varKey, options.cssVarPrefix);\n    return {\n      cssVars: {\n        [cssVar]: value\n      },\n      cssMap: {\n        [lookupKey]: {\n          value: value,\n          var: cssVar,\n          varRef: toVarReference(cssVar)\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../src/css-var.ts"],"names":["replaceWhiteSpace","replaceValue","value","escape","valueStr","isDecimal","Number","parseFloat","toVarDefinition","prefix","toVarReference","toNegativeVar","tokens","_tokens","pick","cleanTheme","transformTemplate","theme","omitVars","extractTokens","cssVarPrefix","cssVars","toProperties","defaultCssVars","getTransformGpuTemplate","getTransformTemplate","Object","__cssVars","__cssMap","__breakpoints","analyzeBreakpoints","prefixes","context","cssMap","initialContext","isObject","Array","nested","properties","finalKey","handler","tokenHandlerMap","space","negativeLookupKey","firstKey","referenceKeys","negativeVarKey","keys","cssVar","options","negativeValue","isCssVar","String","varRef","var","defaultHandler","lookupKey","varKey"],"mappings":"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","sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  pick,\n  analyzeBreakpoints,\n} from \"@chakra-ui/utils\"\nimport type { WithCSSVar } from \"./types\"\n\nconst replaceWhiteSpace = (value: string, replaceValue = \"-\") =>\n  value.replace(/\\s+/g, replaceValue)\n\nconst escape = (value: string | number) => {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  const isDecimal = !Number.isInteger(parseFloat(value.toString()))\n  return isDecimal ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport const toVarDefinition = (value: string, prefix = \"\") =>\n  `--${[prefix, escape(value)].filter(Boolean).join(\"-\")}`\nexport const toVarReference = (value: string) => `var(${escape(value)})`\nexport const toNegativeVar = (value: string) => `calc(${escape(value)} * -1)`\n\nexport const tokens = [\n  \"colors\",\n  \"borders\",\n  \"borderWidths\",\n  \"borderStyles\",\n  \"fonts\",\n  \"fontSizes\",\n  \"fontWeights\",\n  \"letterSpacings\",\n  \"lineHeights\",\n  \"radii\",\n  \"space\",\n  \"shadows\",\n  \"sizes\",\n  \"zIndices\",\n  \"transition\",\n] as const\n\nexport type ThemeScale =\n  | typeof tokens[number]\n  | \"transition.duration\"\n  | \"transition.property\"\n  | \"transition.easing\"\n\nfunction extractTokens(theme: Dict) {\n  const _tokens = (tokens as unknown) as string[]\n  return pick(theme, _tokens)\n}\n\nfunction omitVars(rawTheme: Dict) {\n  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme\n  return cleanTheme\n}\n\n/**\n * The CSS transform order following the upcoming spec from CSSWG\n * translate => rotate => scale => skew\n * @see https://drafts.csswg.org/css-transforms-2/#ctm\n * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/\n */\nconst transformTemplate = [\n  \"rotate(var(--chakra-rotate, 0))\",\n  \"scaleX(var(--chakra-scale-x, 1))\",\n  \"scaleY(var(--chakra-scale-y, 1))\",\n  \"skewX(var(--chakra-skew-x, 0))\",\n  \"skewY(var(--chakra-skew-y, 0))\",\n]\n\nexport function getTransformTemplate() {\n  return [\n    \"translateX(var(--chakra-translate-x, 0))\",\n    \"translateY(var(--chakra-translate-y, 0))\",\n    ...transformTemplate,\n  ].join(\" \")\n}\n\nexport function getTransformGpuTemplate() {\n  return [\n    \"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\",\n    ...transformTemplate,\n  ].join(\" \")\n}\n\nexport function toCSSVar<T extends Dict>(rawTheme: T) {\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n  const theme = omitVars(rawTheme)\n\n  // omit components and breakpoints from css variable map\n  const tokens = extractTokens(theme)\n\n  const cssVarPrefix = theme.config?.cssVarPrefix\n\n  const {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars,\n  } = toProperties(tokens, { cssVarPrefix })\n\n  const defaultCssVars: Dict = {\n    \"--chakra-ring-offset\": \"0px\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-width\": \"3px\",\n    \"--chakra-ring-inset\": \"var(--chakra-empty, /*!*/ /*!*/)\",\n    \"--chakra-ring-offset-shadow\":\n      \"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)\",\n    \"--chakra-ring-shadow\":\n      \"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)\",\n    \"--chakra-ring\":\n      \"var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent\",\n    \"--chakra-transform-gpu\": getTransformGpuTemplate(),\n    \"--chakra-transform\": getTransformTemplate(),\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\",\n  }\n\n  Object.assign(theme, {\n    __cssVars: { ...defaultCssVars, ...cssVars },\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints),\n  })\n\n  return theme as WithCSSVar<T>\n}\n\ntype ToPropertiesOptions = { cssVarPrefix?: string }\n\nfunction toProperties(\n  target: Dict,\n  options: ToPropertiesOptions,\n  initialContext?: { cssMap?: Dict; cssVars?: Dict },\n  prefixes: string[] = [],\n) {\n  const context = {\n    cssMap: {\n      ...initialContext?.cssMap,\n    },\n    cssVars: {\n      ...initialContext?.cssVars,\n    },\n  }\n\n  return Object.entries(target).reduce((properties, [key, value]) => {\n    if (isObject(value) || Array.isArray(value)) {\n      const nested = toProperties(\n        value,\n        options,\n        properties,\n        prefixes.concat(key),\n      )\n      Object.assign(properties.cssVars, nested.cssVars)\n      Object.assign(properties.cssMap, nested.cssMap)\n    } else {\n      const finalKey = prefixes.concat(key)\n      // firstKey will be e.g. \"space\"\n      const [firstKey] = finalKey\n\n      const handler =\n        tokenHandlerMap[firstKey] ?? tokenHandlerMap.defaultHandler\n\n      const { cssVars, cssMap } = handler(finalKey, value, options)\n      Object.assign(properties.cssVars, cssVars)\n      Object.assign(properties.cssMap, cssMap)\n    }\n\n    return properties\n  }, context)\n}\n\n/**\n * Define transformation handlers for ThemeScale\n */\nconst tokenHandlerMap: Partial<\n  Record<\n    ThemeScale | \"defaultHandler\",\n    (\n      keys: string[],\n      value: unknown,\n      options: ToPropertiesOptions,\n    ) => { cssVars: Dict; cssMap: Dict }\n  >\n> = {\n  space: (keys, value, options) => {\n    const properties = tokenHandlerMap.defaultHandler!(keys, value, options)\n    const [firstKey, ...referenceKeys] = keys\n\n    const negativeLookupKey = `${firstKey}.-${referenceKeys.join(\".\")}`\n    const negativeVarKey = keys.join(\"-\")\n    const cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix)\n    const negativeValue = isCssVar(String(value))\n      ? toNegativeVar(String(value))\n      : `-${value}`\n\n    const varRef = toNegativeVar(toVarReference(cssVar))\n\n    return {\n      cssVars: properties.cssVars,\n      cssMap: {\n        ...properties.cssMap,\n        [negativeLookupKey]: {\n          value: negativeValue,\n          var: cssVar,\n          varRef,\n        },\n      },\n    }\n  },\n  defaultHandler: (keys, value, options) => {\n    const lookupKey = keys.join(\".\")\n    const varKey = keys.join(\"-\")\n\n    const cssVar = toVarDefinition(varKey, options.cssVarPrefix)\n\n    return {\n      cssVars: {\n        [cssVar]: value,\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: cssVar,\n          varRef: toVarReference(cssVar),\n        },\n      },\n    }\n  },\n}\n"]},"metadata":{},"sourceType":"module"}