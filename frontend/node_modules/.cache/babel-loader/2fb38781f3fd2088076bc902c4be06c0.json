{"ast":null,"code":"import { createTransform } from \"../create-transform\";\nimport { t } from \"../utils\";\nvar reverse = {\n  \"row-reverse\": {\n    space: \"--chakra-space-x-reverse\",\n    divide: \"--chakra-divide-x-reverse\"\n  },\n  \"column-reverse\": {\n    space: \"--chakra-space-y-reverse\",\n    divide: \"--chakra-divide-y-reverse\"\n  }\n};\nvar owlSelector = \"& > :not(style) ~ :not(style)\";\nexport var flexbox = {\n  alignItems: true,\n  alignContent: true,\n  justifyItems: true,\n  justifyContent: true,\n  flexWrap: true,\n  flexDirection: {\n    transform: function transform(value) {\n      var _reverse$value;\n\n      var _ref = (_reverse$value = reverse[value]) != null ? _reverse$value : {},\n          space = _ref.space,\n          divide = _ref.divide;\n\n      var result = {\n        flexDirection: value\n      };\n      if (space) result[space] = 1;\n      if (divide) result[divide] = 1;\n      return result;\n    }\n  },\n  spaceX: {\n    static: {\n      [owlSelector]: {\n        marginInlineStart: \"calc(var(--chakra-space-x) * calc(1 - var(--chakra-space-x-reverse)))\",\n        marginInlineEnd: \"calc(var(--chakra-space-x) * var(--chakra-space-x-reverse))\"\n      }\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: function transform(value) {\n        return value !== null ? {\n          \"--chakra-space-x\": value\n        } : null;\n      }\n    })\n  },\n  spaceY: {\n    static: {\n      [owlSelector]: {\n        marginTop: \"calc(var(--chakra-space-y) * calc(1 - var(--chakra-space-y-reverse)))\",\n        marginBottom: \"calc(var(--chakra-space-y) * var(--chakra-space-y-reverse))\"\n      }\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: function transform(value) {\n        return value != null ? {\n          \"--chakra-space-y\": value\n        } : null;\n      }\n    })\n  },\n  flex: true,\n  flexFlow: true,\n  flexGrow: true,\n  flexShrink: true,\n  flexBasis: t.sizes(\"flexBasis\"),\n  justifySelf: true,\n  alignSelf: true,\n  order: true,\n  placeItems: true,\n  placeContent: true,\n  placeSelf: true,\n  flexDir: t.prop(\"flexDirection\")\n};","map":{"version":3,"sources":["../../../src/config/flexbox.ts"],"names":["reverse","space","divide","owlSelector","flexbox","alignItems","alignContent","justifyItems","justifyContent","flexWrap","flexDirection","transform","result","value","spaceX","static","marginInlineStart","marginInlineEnd","createTransform","scale","spaceY","marginTop","marginBottom","flex","flexFlow","flexGrow","flexShrink","flexBasis","t","justifySelf","alignSelf","order","placeItems","placeContent","placeSelf","flexDir"],"mappings":"AACA,SAAA,eAAA,QAAA,qBAAA;AAEA,SAAA,CAAA,QAAA,UAAA;AAEA,IAAMA,OAAO,GAAG;AACd,iBAAe;AACbC,IAAAA,KAAK,EADQ,0BAAA;AAEbC,IAAAA,MAAM,EAAE;AAFK,GADD;AAKd,oBAAkB;AAChBD,IAAAA,KAAK,EADW,0BAAA;AAEhBC,IAAAA,MAAM,EAAE;AAFQ;AALJ,CAAhB;AAWA,IAAMC,WAAW,GAAjB,+BAAA;AAEA,OAAO,IAAMC,OAAe,GAAG;AAC7BC,EAAAA,UAAU,EADmB,IAAA;AAE7BC,EAAAA,YAAY,EAFiB,IAAA;AAG7BC,EAAAA,YAAY,EAHiB,IAAA;AAI7BC,EAAAA,cAAc,EAJe,IAAA;AAK7BC,EAAAA,QAAQ,EALqB,IAAA;AAM7BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,SADa,qBACJ,KADI,EACI;AAAA,UAAA,cAAA;;AAAA,iBACT,CAAA,cAAA,GAAoBX,OAAO,CAA3B,KAA2B,CAA3B,KAAA,IAAA,GAAA,cAAA,GAAN,EADe;AAAA,UACT,KADS,QACT,KADS;AAAA,UACAE,MADA,QACAA,MADA;;AAEf,UAAMU,MAAM,GAAG;AAAEF,QAAAA,aAAa,EAAEG;AAAjB,OAAf;AACA,UAAA,KAAA,EAAWD,MAAM,CAANA,KAAM,CAANA,GAAAA,CAAAA;AACX,UAAA,MAAA,EAAYA,MAAM,CAANA,MAAM,CAANA,GAAAA,CAAAA;AACZ,aAAA,MAAA;AACD;AAPY,GANc;AAe7BE,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AACN,OAAA,WAAA,GAAe;AACbC,QAAAA,iBAAiB,EADJ,uEAAA;AAGbC,QAAAA,eAAe,EACb;AAJW;AADT,KADF;AASNN,IAAAA,SAAS,EAAEO,eAAe,CAAC;AACzBC,MAAAA,KAAK,EADoB,OAAA;AAEzBR,MAAAA,SAAS,EAAGE,mBAAAA,KAAD;AAAA,eACT,KAAK,KAAL,IAAA,GAAiB;AAAE,8BAAoBA;AAAtB,SAAjB,GAAiD,IADxC;AAAA;AAFc,KAAD;AATpB,GAfqB;AA8B7BO,EAAAA,MAAM,EAAE;AACNL,IAAAA,MAAM,EAAE;AACN,OAAA,WAAA,GAAe;AACbM,QAAAA,SAAS,EADI,uEAAA;AAGbC,QAAAA,YAAY,EACV;AAJW;AADT,KADF;AASNX,IAAAA,SAAS,EAAEO,eAAe,CAAC;AACzBC,MAAAA,KAAK,EADoB,OAAA;AAEzBR,MAAAA,SAAS,EAAGE,mBAAAA,KAAD;AAAA,eACT,KAAK,IAAL,IAAA,GAAgB;AAAE,8BAAoBA;AAAtB,SAAhB,GAAgD,IADvC;AAAA;AAFc,KAAD;AATpB,GA9BqB;AA6C7BU,EAAAA,IAAI,EA7CyB,IAAA;AA8C7BC,EAAAA,QAAQ,EA9CqB,IAAA;AA+C7BC,EAAAA,QAAQ,EA/CqB,IAAA;AAgD7BC,EAAAA,UAAU,EAhDmB,IAAA;AAiD7BC,EAAAA,SAAS,EAAEC,CAAC,CAADA,KAAAA,CAjDkB,WAiDlBA,CAjDkB;AAkD7BC,EAAAA,WAAW,EAlDkB,IAAA;AAmD7BC,EAAAA,SAAS,EAnDoB,IAAA;AAoD7BC,EAAAA,KAAK,EApDwB,IAAA;AAqD7BC,EAAAA,UAAU,EArDmB,IAAA;AAsD7BC,EAAAA,YAAY,EAtDiB,IAAA;AAuD7BC,EAAAA,SAAS,EAvDoB,IAAA;AAwD7BC,EAAAA,OAAO,EAAEP,CAAC,CAADA,IAAAA,CAAAA,eAAAA;AAxDoB,CAAxB","sourcesContent":["import * as CSS from \"csstype\"\nimport { createTransform } from \"../create-transform\"\nimport { Config } from \"../prop-config\"\nimport { Length, t, Token } from \"../utils\"\n\nconst reverse = {\n  \"row-reverse\": {\n    space: \"--chakra-space-x-reverse\",\n    divide: \"--chakra-divide-x-reverse\",\n  },\n  \"column-reverse\": {\n    space: \"--chakra-space-y-reverse\",\n    divide: \"--chakra-divide-y-reverse\",\n  },\n}\n\nconst owlSelector = \"& > :not(style) ~ :not(style)\"\n\nexport const flexbox: Config = {\n  alignItems: true,\n  alignContent: true,\n  justifyItems: true,\n  justifyContent: true,\n  flexWrap: true,\n  flexDirection: {\n    transform(value) {\n      const { space, divide } = reverse[value] ?? {}\n      const result = { flexDirection: value }\n      if (space) result[space] = 1\n      if (divide) result[divide] = 1\n      return result\n    },\n  },\n  spaceX: {\n    static: {\n      [owlSelector]: {\n        marginInlineStart:\n          \"calc(var(--chakra-space-x) * calc(1 - var(--chakra-space-x-reverse)))\",\n        marginInlineEnd:\n          \"calc(var(--chakra-space-x) * var(--chakra-space-x-reverse))\",\n      },\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: (value) =>\n        value !== null ? { \"--chakra-space-x\": value } : null,\n    }),\n  },\n  spaceY: {\n    static: {\n      [owlSelector]: {\n        marginTop:\n          \"calc(var(--chakra-space-y) * calc(1 - var(--chakra-space-y-reverse)))\",\n        marginBottom:\n          \"calc(var(--chakra-space-y) * var(--chakra-space-y-reverse))\",\n      },\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: (value) =>\n        value != null ? { \"--chakra-space-y\": value } : null,\n    }),\n  },\n  flex: true,\n  flexFlow: true,\n  flexGrow: true,\n  flexShrink: true,\n  flexBasis: t.sizes(\"flexBasis\"),\n  justifySelf: true,\n  alignSelf: true,\n  order: true,\n  placeItems: true,\n  placeContent: true,\n  placeSelf: true,\n  flexDir: t.prop(\"flexDirection\"),\n}\n\nexport interface FlexboxProps {\n  /**\n   * The CSS `align-items` property.\n   *\n   * It defines the `align-self` value on all direct children as a group.\n   *\n   * - In Flexbox, it controls the alignment of items on the Cross Axis.\n   * - In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/align-items)\n   */\n  alignItems?: Token<CSS.Property.AlignItems>\n  /**\n   * The CSS `align-content` property.\n   *\n   * It defines the distribution of space between and around\n   * content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/align-content)\n   */\n  alignContent?: Token<CSS.Property.AlignContent>\n  /**\n   * The CSS `justify-items` property.\n   *\n   * It defines the default `justify-self` for all items of the box,\n   * giving them all a default way of justifying each box\n   * along the appropriate axis.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/justify-items)\n   */\n  justifyItems?: Token<CSS.Property.JustifyItems>\n  /**\n   * The CSS `justify-content` property.\n   *\n   * It defines how the browser distributes space between and around content items\n   * along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/justify-content)\n   */\n  justifyContent?: Token<CSS.Property.JustifyContent>\n  /**\n   * The CSS `flex-wrap` property.\n   *\n   * It defines whether flex items are forced onto one line or\n   * can wrap onto multiple lines. If wrapping is allowed,\n   * it sets the direction that lines are stacked.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)\n   */\n  flexWrap?: Token<CSS.Property.FlexWrap>\n  /**\n   * The CSS `flex-flow` property.\n   *\n   * It is a shorthand property for `flex-direction` and `flex-wrap`.\n   * It specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-flow)\n   */\n  flexFlow?: Token<CSS.Property.FlexFlow>\n  /**\n   * The CSS `flex-basis` property.\n   *\n   * It defines the initial main size of a flex item.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-basis)\n   */\n  flexBasis?: Token<CSS.Property.FlexBasis<Length>>\n  /**\n   * The CSS `flex-direction` property.\n   *\n   * It defines how flex items are placed in the flex container\n   * defining the main axis and the direction (normal or reversed).\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-direction)\n   */\n  flexDirection?: Token<CSS.Property.FlexDirection>\n  /**\n   * The CSS `flex-direction` property.\n   *\n   * It defines how flex items are placed in the flex container\n   * defining the main axis and the direction (normal or reversed).\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-direction)\n   */\n  flexDir?: Token<CSS.Property.FlexDirection>\n  /**\n   * The CSS `flex` property.\n   *\n   * It defines how a flex item will grow or shrink\n   * to fit the space available in its flex container.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex)\n   */\n  flex?: Token<CSS.Property.Flex<Length>>\n  /**\n   * The CSS `justify-self` property.\n   *\n   * It defines the way a box is justified inside its\n   * alignment container along the appropriate axis.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-flow)\n   */\n  justifySelf?: Token<CSS.Property.JustifySelf>\n  /**\n   * The CSS `align-self` property.\n   *\n   * It works like `align-items`, but applies only to a\n   * single flexbox item, instead of all of them.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/align-self)\n   */\n  alignSelf?: Token<CSS.Property.AlignSelf>\n  /**\n   * The CSS `order` property.\n   *\n   * It defines the order to lay out an item in a flex or grid container.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/order)\n   */\n  order?: Token<CSS.Property.Order>\n  /**\n   * The CSS `flex-grow` property.\n   *\n   * It defines how much a flexbox item should grow\n   * if there's space available.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-grow)\n   */\n  flexGrow?: Token<CSS.Property.FlexGrow | (string & number)>\n  /**\n   * The CSS `flex-shrink` property.\n   *\n   * It defines how much a flexbox item should shrink\n   * if there's not enough space available.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)\n   */\n  flexShrink?: Token<CSS.Property.FlexShrink | (string & number)>\n  /**\n   * The CSS `place-items` property.\n   *\n   * It allows you to align items along both the block and\n   * inline directions at once (i.e. the align-items and justify-items properties)\n   * in a relevant layout system such as `Grid` or `Flex`.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/place-items)\n   */\n  placeItems?: Token<CSS.Property.PlaceItems>\n  /**\n   * The CSS `place-content` property.\n   *\n   * It allows you to align content along both the block and\n   * inline directions at once (i.e. the align-content and justify-content properties)\n   * in a relevant layout system such as Grid or Flexbox.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/place-content)\n   */\n  placeContent?: Token<CSS.Property.PlaceContent>\n  /**\n   * The CSS `place-self` property.\n   *\n   * It allows you to align an individual item in both the block and\n   * inline directions at once (i.e. the align-self and justify-self properties)\n   * in a relevant layout system such as Grid or Flexbox.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/place-self)\n   */\n  placeSelf?: Token<CSS.Property.PlaceSelf>\n  /**\n   * Controls the horizontal space between elements\n   */\n  // spaceX?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Controls the vertical space between elements\n   */\n  // spaceY?: Token<CSS.Property.Margin | number, \"space\">\n}\n"]},"metadata":{},"sourceType":"module"}