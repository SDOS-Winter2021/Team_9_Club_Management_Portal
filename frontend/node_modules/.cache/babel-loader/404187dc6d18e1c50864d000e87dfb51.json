{"ast":null,"code":"import CSSReset from \"@chakra-ui/css-reset\";\nimport { PortalManager } from \"@chakra-ui/portal\";\nimport { ColorModeProvider, GlobalStyle, ThemeProvider } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport * as React from \"react\";\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\n\nexport var ChakraProvider = function ChakraProvider(props) {\n  var children = props.children,\n      colorModeManager = props.colorModeManager,\n      portalZIndex = props.portalZIndex,\n      _props$resetCSS = props.resetCSS,\n      resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? defaultTheme : _props$theme;\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, resetCSS && /*#__PURE__*/React.createElement(CSSReset, null), /*#__PURE__*/React.createElement(GlobalStyle, null), portalZIndex ? /*#__PURE__*/React.createElement(PortalManager, {\n    zIndex: portalZIndex\n  }, children) : children));\n};","map":{"version":3,"sources":["../../src/chakra-provider.tsx"],"names":["ChakraProvider","props","resetCSS","theme","defaultTheme","config","portalZIndex"],"mappings":"AAAA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,aAAA,QAAA,mBAAA;AACA,SAAA,iBAAA,EAAA,WAAA,EAAA,aAAA,QAAA,mBAAA;AAMA,OAAA,YAAA,MAAA,kBAAA;AAEA,OAAO,KAAP,KAAA,MAAA,OAAA;AAgCA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,cAAc,GAAIC,SAAlBD,cAAkBC,CAAAA,KAAD,EAAgC;AAAA,MACtD,QADsD,GAC5D,KAD4D,CACtD,QADsD;AAAA,MACtD,gBADsD,GAC5D,KAD4D,CACtD,gBADsD;AAAA,MACtD,YADsD,GAC5D,KAD4D,CACtD,YADsD;AAAA,wBAC5D,KAD4D,CAK1DC,QAL0D;AAAA,MAK1DA,QAL0D,gCACtD,IADsD;AAAA,qBAC5D,KAD4D,CAM1DC,KAN0D;AAAA,MAM1DA,KAN0D,6BAMlDC,YANkD;AAS5D,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,KAAK,EAAED;AAAtB,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,IAAA,gBAAgB,EADlB,gBAAA;AAEE,IAAA,OAAO,EAAEA,KAAK,CAACE;AAFjB,GAAA,EAIGH,QAAQ,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,QAAA,EAJf,IAIe,CAJf,EAAA,aAKE,KAAA,CAAA,aAAA,CAAA,WAAA,EALF,IAKE,CALF,EAMGI,YAAY,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,MAAM,EAAEA;AAAvB,GAAA,EADW,QACX,CADW,GARnB,QAEI,CADF,CADF;AATK,CAAA","sourcesContent":["import CSSReset from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ChakraProviderProps {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  children?: React.ReactNode\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider = (props: ChakraProviderProps) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetCSS = true,\n    theme = defaultTheme,\n  } = props\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ColorModeProvider\n        colorModeManager={colorModeManager}\n        options={theme.config}\n      >\n        {resetCSS && <CSSReset />}\n        <GlobalStyle />\n        {portalZIndex ? (\n          <PortalManager zIndex={portalZIndex}>{children}</PortalManager>\n        ) : (\n          children\n        )}\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}