{"ast":null,"code":"import _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useFocusEffect, useIds, useUnmountEffect } from \"@chakra-ui/hooks\";\nimport { addItem, callAllHandlers, createContext, getNextIndex, getPrevIndex, isArray, isUndefined, mergeRefs, normalizeEventKey, removeItem, warn } from \"@chakra-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\n\nexport function useAccordion(props) {\n  var onChange = props.onChange,\n      defaultIndex = props.defaultIndex,\n      indexProp = props.index,\n      allowMultiple = props.allowMultiple,\n      allowToggle = props.allowToggle,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"defaultIndex\", \"index\", \"allowMultiple\", \"allowToggle\"]); // validate the props and `warn` if used incorrectly\n\n\n  allowMultipleWarning(props);\n  allowMultipleAndAllowToggleWarning(props);\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n\n  var domContext = useDescendants();\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n\n  var _useState = useState(-1),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusedIndex = _useState2[0],\n      setFocusedIndex = _useState2[1];\n  /**\n   * Reset focused index when accordion unmounts\n   * or descendants change\n   */\n\n\n  useUnmountEffect(function () {\n    setFocusedIndex(-1);\n  }, [domContext.descendants]);\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n\n  var _useControllableState = useControllableState({\n    value: indexProp,\n    defaultValue: function defaultValue() {\n      if (allowMultiple) return defaultIndex != null ? defaultIndex : [];\n      return defaultIndex != null ? defaultIndex : -1;\n    },\n    onChange: onChange\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      index = _useControllableState2[0],\n      setIndex = _useControllableState2[1];\n  /**\n   * Gets the `isOpen` and `onChange` props for a child accordion item based on\n   * the child's index.\n   *\n   * @param idx {number} The index of the child accordion item\n   */\n\n\n  var getAccordionItemProps = function getAccordionItemProps(idx) {\n    var isOpen = false;\n\n    if (idx !== null) {\n      isOpen = isArray(index) ? index.includes(idx) : index === idx;\n    }\n\n    var onChange = function onChange(isOpen) {\n      if (idx === null) return;\n\n      if (allowMultiple && isArray(index)) {\n        var nextState = isOpen ? addItem(index, idx) : removeItem(index, idx);\n        setIndex(nextState);\n      } else if (isOpen) {\n        setIndex(idx);\n      } else if (allowToggle) {\n        setIndex(-1);\n      }\n    };\n\n    return {\n      isOpen: isOpen,\n      onChange: onChange\n    };\n  };\n\n  return {\n    index: index,\n    setIndex: setIndex,\n    htmlProps: htmlProps,\n    getAccordionItemProps: getAccordionItemProps,\n    focusedIndex: focusedIndex,\n    setFocusedIndex: setFocusedIndex,\n    domContext: domContext\n  };\n}\n\nvar _createContext = createContext({\n  name: \"AccordionContext\",\n  errorMessage: \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    AccordionProvider = _createContext2[0],\n    useAccordionContext = _createContext2[1];\n\nexport { AccordionProvider, useAccordionContext };\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and its children\n */\n\nexport function useAccordionItem(props) {\n  var isDisabled = props.isDisabled,\n      isFocusable = props.isFocusable,\n      id = props.id,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isDisabled\", \"isFocusable\", \"id\"]);\n\n  var _useAccordionContext = useAccordionContext(),\n      getAccordionItemProps = _useAccordionContext.getAccordionItemProps,\n      domContext = _useAccordionContext.domContext,\n      focusedIndex = _useAccordionContext.focusedIndex,\n      setFocusedIndex = _useAccordionContext.setFocusedIndex;\n\n  var descendants = domContext.descendants;\n  var buttonRef = useRef(null);\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n\n  var _useIds = useIds(id, \"accordion-button\", \"accordion-panel\"),\n      _useIds2 = _slicedToArray(_useIds, 2),\n      buttonId = _useIds2[0],\n      panelId = _useIds2[1];\n\n  focusableNotDisabledWarning(props);\n  /**\n   * Think of this as a way to register this accordion item\n   * with its parent `useAccordion`\n   */\n\n  var index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n\n  var _getAccordionItemProp = getAccordionItemProps(index === -1 ? null : index),\n      isOpen = _getAccordionItemProp.isOpen,\n      onChange = _getAccordionItemProp.onChange;\n\n  var onOpen = function onOpen() {\n    onChange == null ? void 0 : onChange(true);\n  };\n\n  var onClose = function onClose() {\n    onChange == null ? void 0 : onChange(false);\n  };\n\n  var shouldFocus = index === focusedIndex;\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n\n  useFocusEffect(buttonRef, {\n    shouldFocus: shouldFocus\n  });\n  /**\n   * Toggle the visibility of the accordion item\n   */\n\n  var onClick = useCallback(function () {\n    onChange == null ? void 0 : onChange(!isOpen);\n    setFocusedIndex(index);\n  }, [index, isOpen, onChange, setFocusedIndex]);\n  /**\n   * Manage keyboard navigation between accordion items.\n   */\n\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowDown: function ArrowDown() {\n        var _nextAccordion$elemen;\n\n        var nextIndex = getNextIndex(index, descendants.length);\n        var nextAccordion = descendants[nextIndex];\n        nextAccordion == null ? void 0 : (_nextAccordion$elemen = nextAccordion.element) == null ? void 0 : _nextAccordion$elemen.focus();\n      },\n      ArrowUp: function ArrowUp() {\n        var _prevAccordion$elemen;\n\n        var prevIndex = getPrevIndex(index, descendants.length);\n        var prevAccordion = descendants[prevIndex];\n        prevAccordion == null ? void 0 : (_prevAccordion$elemen = prevAccordion.element) == null ? void 0 : _prevAccordion$elemen.focus();\n      },\n      Home: function Home() {\n        var _firstAccordion$eleme;\n\n        var firstAccordion = descendants[0];\n        firstAccordion == null ? void 0 : (_firstAccordion$eleme = firstAccordion.element) == null ? void 0 : _firstAccordion$eleme.focus();\n      },\n      End: function End() {\n        var _lastAccordion$elemen;\n\n        var lastAccordion = descendants[descendants.length - 1];\n        lastAccordion == null ? void 0 : (_lastAccordion$elemen = lastAccordion.element) == null ? void 0 : _lastAccordion$elemen.focus();\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, index]);\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n\n  var onFocus = useCallback(function () {\n    return setFocusedIndex(index);\n  }, [index, setFocusedIndex]);\n  var getButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      type: \"button\",\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n    });\n  }, [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId]);\n  var getPanelProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen\n    });\n  }, [buttonId, isOpen, panelId]);\n  return {\n    isOpen: isOpen,\n    isDisabled: isDisabled,\n    isFocusable: isFocusable,\n    onOpen: onOpen,\n    onClose: onClose,\n    getButtonProps: getButtonProps,\n    getPanelProps: getPanelProps,\n    htmlProps: htmlProps\n  };\n}\n\nfunction allowMultipleWarning(props) {\n  var index = props.index || props.defaultIndex;\n  var condition = !isUndefined(index) && !isArray(index) && props.allowMultiple;\n  warn({\n    condition: !!condition,\n    message: \"If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: \" + typeof index + \",\"\n  });\n}\n\nfunction allowMultipleAndAllowToggleWarning(props) {\n  warn({\n    condition: !!(props.allowMultiple && props.allowToggle),\n    message: \"If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not\"\n  });\n}\n\nfunction focusableNotDisabledWarning(props) {\n  warn({\n    condition: !!(props.isFocusable && !props.isDisabled),\n    message: \"Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\\n    \"\n  });\n}","map":{"version":3,"sources":["../../src/use-accordion.ts"],"names":["index","allowToggle","allowMultipleWarning","allowMultipleAndAllowToggleWarning","domContext","useDescendants","useState","useUnmountEffect","setFocusedIndex","useControllableState","value","defaultValue","defaultIndex","onChange","getAccordionItemProps","idx","isOpen","isArray","allowMultiple","nextState","addItem","removeItem","setIndex","htmlProps","focusedIndex","createContext","name","errorMessage","id","useAccordionContext","descendants","buttonRef","useRef","useIds","focusableNotDisabledWarning","useDescendant","element","context","disabled","focusable","isFocusable","onOpen","onClose","shouldFocus","useFocusEffect","onClick","useCallback","onKeyDown","event","eventKey","normalizeEventKey","keyMap","ArrowDown","nextIndex","getNextIndex","nextAccordion","ArrowUp","prevIndex","getPrevIndex","prevAccordion","Home","firstAccordion","End","lastAccordion","action","onFocus","getButtonProps","props","ref","type","mergeRefs","callAllHandlers","getPanelProps","role","hidden","isDisabled","condition","isUndefined","warn","message"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useFocusEffect,\n  useIds,\n  useUnmountEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  callAllHandlers,\n  createContext,\n  EventKeyMap,\n  getNextIndex,\n  getPrevIndex,\n  isArray,\n  isUndefined,\n  mergeRefs,\n  normalizeEventKey,\n  PropGetter,\n  removeItem,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useRef, useState } from \"react\"\n\nexport type ExpandedIndex = number | number[]\n\nexport interface UseAccordionProps {\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   */\n  allowMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   */\n  allowToggle?: boolean\n  /**\n   * The index(es) of the expanded accordion item\n   */\n  index?: ExpandedIndex\n  /**\n   * The initial index(es) of the expanded accordion item\n   */\n  defaultIndex?: ExpandedIndex\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?: (expandedIndex: ExpandedIndex) => void\n}\n\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\nexport function useAccordion(props: UseAccordionProps) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    ...htmlProps\n  } = props\n\n  // validate the props and `warn` if used incorrectly\n  allowMultipleWarning(props)\n  allowMultipleAndAllowToggleWarning(props)\n\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n  const domContext = useDescendants()\n\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Reset focused index when accordion unmounts\n   * or descendants change\n   */\n  useUnmountEffect(() => {\n    setFocusedIndex(-1)\n  }, [domContext.descendants])\n\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n  const [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue: () => {\n      if (allowMultiple) return defaultIndex ?? []\n      return defaultIndex ?? -1\n    },\n    onChange,\n  })\n\n  /**\n   * Gets the `isOpen` and `onChange` props for a child accordion item based on\n   * the child's index.\n   *\n   * @param idx {number} The index of the child accordion item\n   */\n  const getAccordionItemProps = (idx: number | null) => {\n    let isOpen = false\n    if (idx !== null) {\n      isOpen = isArray(index) ? index.includes(idx) : index === idx\n    }\n\n    const onChange = (isOpen: boolean) => {\n      if (idx === null) return\n\n      if (allowMultiple && isArray(index)) {\n        const nextState = isOpen ? addItem(index, idx) : removeItem(index, idx)\n        setIndex(nextState)\n      } else if (isOpen) {\n        setIndex(idx)\n      } else if (allowToggle) {\n        setIndex(-1)\n      }\n    }\n\n    return { isOpen, onChange }\n  }\n\n  return {\n    index,\n    setIndex,\n    htmlProps,\n    getAccordionItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    domContext,\n  }\n}\n\nexport type UseAccordionReturn = ReturnType<typeof useAccordion>\n\ninterface AccordionContext extends Omit<UseAccordionReturn, \"htmlProps\"> {\n  reduceMotion: boolean\n}\n\nconst [\n  AccordionProvider,\n  useAccordionContext,\n] = createContext<AccordionContext>({\n  name: \"AccordionContext\",\n  errorMessage:\n    \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\",\n})\n\nexport { AccordionProvider, useAccordionContext }\n\nexport interface UseAccordionItemProps {\n  /**\n   * If `true`, the accordion item will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the accordion item will be focusable.\n   */\n  isFocusable?: boolean\n  /**\n   * A unique id for the accordion item.\n   */\n  id?: string\n}\n\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and its children\n */\nexport function useAccordionItem(props: UseAccordionItemProps) {\n  const { isDisabled, isFocusable, id, ...htmlProps } = props\n\n  const {\n    getAccordionItemProps,\n    domContext,\n    focusedIndex,\n    setFocusedIndex,\n  } = useAccordionContext()\n\n  const { descendants } = domContext\n\n  const buttonRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n  const [buttonId, panelId] = useIds(id, `accordion-button`, `accordion-panel`)\n\n  focusableNotDisabledWarning(props)\n\n  /**\n   * Think of this as a way to register this accordion item\n   * with its parent `useAccordion`\n   */\n  const index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const { isOpen, onChange } = getAccordionItemProps(\n    index === -1 ? null : index,\n  )\n\n  const onOpen = () => {\n    onChange?.(true)\n  }\n\n  const onClose = () => {\n    onChange?.(false)\n  }\n\n  const shouldFocus = index === focusedIndex\n\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n  useFocusEffect(buttonRef, { shouldFocus })\n\n  /**\n   * Toggle the visibility of the accordion item\n   */\n  const onClick = useCallback(() => {\n    onChange?.(!isOpen)\n    setFocusedIndex(index)\n  }, [index, isOpen, onChange, setFocusedIndex])\n\n  /**\n   * Manage keyboard navigation between accordion items.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(index, descendants.length)\n          const nextAccordion = descendants[nextIndex]\n          nextAccordion?.element?.focus()\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(index, descendants.length)\n          const prevAccordion = descendants[prevIndex]\n          prevAccordion?.element?.focus()\n        },\n        Home: () => {\n          const firstAccordion = descendants[0]\n          firstAccordion?.element?.focus()\n        },\n        End: () => {\n          const lastAccordion = descendants[descendants.length - 1]\n          lastAccordion?.element?.focus()\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, index],\n  )\n\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n  const onFocus = useCallback(() => setFocusedIndex(index), [\n    index,\n    setFocusedIndex,\n  ])\n\n  const getButtonProps: PropGetter<HTMLButtonElement> = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      type: \"button\",\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId],\n  )\n\n  const getPanelProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen,\n    }),\n    [buttonId, isOpen, panelId],\n  )\n\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps,\n  }\n}\n\nexport type UseAccordionItemReturn = ReturnType<typeof useAccordionItem>\n\nfunction allowMultipleWarning(props: UseAccordionProps) {\n  const index = props.index || props.defaultIndex\n  const condition =\n    !isUndefined(index) && !isArray(index) && props.allowMultiple\n\n  warn({\n    condition: !!condition,\n    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`,\n  })\n}\n\nfunction allowMultipleAndAllowToggleWarning(props: UseAccordionProps) {\n  warn({\n    condition: !!(props.allowMultiple && props.allowToggle),\n    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`,\n  })\n}\n\nfunction focusableNotDisabledWarning(props: UseAccordionItemProps) {\n  warn({\n    condition: !!(props.isFocusable && !props.isDisabled),\n    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    `,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}