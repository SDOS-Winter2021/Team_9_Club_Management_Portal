{"ast":null,"code":"import _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCallbackRef } from \"./use-callback-ref\";\nexport function useControllableProp(prop, state) {\n  var isControlled = prop !== undefined;\n  var value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\n/**\n * React hook for using controlling component state.\n * @param props\n */\n\nexport function useControllableState(props) {\n  var valueProp = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange;\n  var handleChange = useCallbackRef(onChange);\n\n  var _React$useState = React.useState(defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      valueState = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var isControlled = valueProp !== undefined;\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = React.useCallback(function (next) {\n    var nextValue = runIfFn(next, value);\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    handleChange(nextValue);\n  }, [isControlled, handleChange, value]);\n  return [value, updateValue];\n}","map":{"version":3,"sources":["../../src/use-controllable.ts"],"names":["isControlled","prop","value","onChange","handleChange","useCallbackRef","React","valueProp","updateValue","next","nextValue","runIfFn","setValue"],"mappings":";AAAA,SAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AAEA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAA+D;AACpE,MAAMA,YAAY,GAAGC,IAAI,KAAzB,SAAA;AACA,MAAMC,KAAK,GAAGF,YAAY,IAAI,OAAA,IAAA,KAAhBA,WAAAA,GAAAA,IAAAA,GAAd,KAAA;AACA,SAAO,CAAA,YAAA,EAAP,KAAO,CAAP;AACD;AAqBD;AACA;AACA;AACA;;AACA,OAAO,SAAA,oBAAA,CAAA,KAAA,EAAsE;AAAA,MACrE,SADqE,GAC3E,KAD2E,CACnEE,KADmE;AAAA,MACrE,YADqE,GAC3E,KAD2E,CACrE,YADqE;AAAA,MACnCC,QADmC,GAC3E,KAD2E,CACnCA,QADmC;AAE3E,MAAMC,YAAY,GAAGC,cAAc,CAAnC,QAAmC,CAAnC;;AAF2E,wBAI5CC,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAJ4C;AAAA;AAAA,MAIrE,UAJqE;AAAA,MAIrE,QAJqE;;AAK3E,MAAMN,YAAY,GAAGO,SAAS,KAA9B,SAAA;AAEA,MAAML,KAAK,GAAGF,YAAY,GAAA,SAAA,GAA1B,UAAA;AAEA,MAAMQ,WAAW,GAAG,KAAK,CAAL,WAAA,CACjBC,UAAAA,IAAD,EAAmC;AACjC,QAAMC,SAAS,GAAGC,OAAO,CAAA,IAAA,EAAzB,KAAyB,CAAzB;;AACA,QAAI,CAAJ,YAAA,EAAmB;AACjBC,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AACD;;AACDR,IAAAA,YAAY,CAAZA,SAAY,CAAZA;AANgB,GAAA,EAQlB,CAAA,YAAA,EAAA,YAAA,EARF,KAQE,CARkB,CAApB;AAWA,SAAO,CAAA,KAAA,EAAP,WAAO,CAAP;AACD","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props\n  const handleChange = useCallbackRef(onChange)\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const isControlled = valueProp !== undefined\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n      handleChange(nextValue)\n    },\n    [isControlled, handleChange, value],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}