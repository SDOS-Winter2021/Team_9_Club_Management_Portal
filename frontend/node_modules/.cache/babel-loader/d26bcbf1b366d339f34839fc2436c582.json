{"ast":null,"code":"import { detectBrowser, focus, isActiveElement, isRefObject } from \"@chakra-ui/utils\";\nimport { usePointerEvent } from \"./use-pointer-event\";\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active active element.\n *\n * @internal\n */\n\nexport function useFocusOnPointerDown(props) {\n  var doc = props.doc,\n      elements = props.elements;\n  var isSafari = detectBrowser(\"Safari\");\n  usePointerEvent(doc, \"pointerdown\", function (event) {\n    if (!isSafari) return;\n    var target = event.target;\n    var isValidTarget = elements.some(function (element) {\n      if (isRefObject(element)) {\n        return target === element.current;\n      }\n\n      return target === element;\n    });\n\n    if (!isActiveElement(target) && isValidTarget) {\n      focus(target);\n    }\n  });\n}","map":{"version":3,"sources":["../../src/use-focus-on-pointerdown.ts"],"names":["elements","isSafari","detectBrowser","usePointerEvent","event","target","isValidTarget","element","isRefObject","isActiveElement","focus"],"mappings":"AAAA,SAAA,aAAA,EAAA,KAAA,EAAA,eAAA,EAAA,WAAA,QAAA,kBAAA;AAOA,SAAA,eAAA,QAAA,qBAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,qBAAA,CAAA,KAAA,EAAgE;AAAA,MAC/D,GAD+D,GACrE,KADqE,CAC/D,GAD+D;AAAA,MACxDA,QADwD,GACrE,KADqE,CACxDA,QADwD;AAGrE,MAAMC,QAAQ,GAAGC,aAAa,CAA9B,QAA8B,CAA9B;AAEAC,EAAAA,eAAe,CAAA,GAAA,EAAA,aAAA,EAAsBC,UAAAA,KAAD,EAAW;AAC7C,QAAI,CAAJ,QAAA,EAAe;AACf,QAAMC,MAAM,GAAGD,KAAK,CAApB,MAAA;AACA,QAAME,aAAa,GAAG,QAAQ,CAAR,IAAA,CAAeC,UAAAA,OAAD,EAAa;AAC/C,UAAIC,WAAW,CAAf,OAAe,CAAf,EAA0B;AACxB,eAAOH,MAAM,KAAKE,OAAO,CAAzB,OAAA;AACD;;AACD,aAAOF,MAAM,KAAb,OAAA;AAJF,KAAsB,CAAtB;;AAOA,QAAI,CAACI,eAAe,CAAhB,MAAgB,CAAhB,IAAJ,aAAA,EAA+C;AAC7CC,MAAAA,KAAK,CAALA,MAAK,CAALA;AACD;AAZHP,GAAe,CAAfA;AAcD","sourcesContent":["import {\n  detectBrowser,\n  focus,\n  isActiveElement,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\n\nexport interface UseFocusOnMouseDownProps {\n  doc: Document | null\n  elements: Array<RefObject<HTMLElement> | HTMLElement | null>\n}\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { doc, elements } = props\n\n  const isSafari = detectBrowser(\"Safari\")\n\n  usePointerEvent(doc, \"pointerdown\", (event) => {\n    if (!isSafari) return\n    const target = event.target as HTMLElement\n    const isValidTarget = elements.some((element) => {\n      if (isRefObject(element)) {\n        return target === element.current\n      }\n      return target === element\n    })\n\n    if (!isActiveElement(target) && isValidTarget) {\n      focus(target)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}