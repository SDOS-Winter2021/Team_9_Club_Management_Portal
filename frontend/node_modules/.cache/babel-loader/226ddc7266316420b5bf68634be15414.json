{"ast":null,"code":"import { __assign } from 'tslib';\nimport { useContext, useRef, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useVisualElementContext } from '../context/MotionContext.js';\nimport { PresenceContext } from '../../components/AnimatePresence/PresenceContext.js';\nimport { isPresent } from '../../components/AnimatePresence/use-presence.js';\nimport { LayoutGroupContext } from '../../components/AnimateSharedLayout/LayoutGroupContext.js';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.js';\nimport { useSnapshotOnUnmount } from '../features/layout/use-snapshot-on-unmount.js';\n\nfunction useLayoutId(_a) {\n  var layoutId = _a.layoutId;\n  var layoutGroupId = useContext(LayoutGroupContext);\n  return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n\nfunction useVisualElement(createVisualElement, props, isStatic, ref) {\n  var config = useContext(MotionConfigContext);\n  var parent = useVisualElementContext();\n  var presenceContext = useContext(PresenceContext);\n  var layoutId = useLayoutId(props);\n  var visualElementRef = useRef(null);\n\n  if (isStatic && visualElementRef.current) {\n    /**\n     * Clear the VisualElement state in static mode after the initial render.\n     * This will allow the VisualElement to render every render as if its the first,\n     * with no history. This is basically a cheaper way of reinstantiating the VisualElement\n     * every render.\n     */\n    visualElementRef.current.clearState(props);\n  } else if (!visualElementRef.current) {\n    visualElementRef.current = createVisualElement(isStatic, {\n      parent: parent,\n      ref: ref,\n      isStatic: isStatic,\n      props: __assign(__assign({}, props), {\n        layoutId: layoutId\n      }),\n      presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,\n      blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false\n    });\n  }\n\n  var visualElement = visualElementRef.current;\n  useIsomorphicLayoutEffect(function () {\n    visualElement.setProps(__assign(__assign(__assign({}, config), props), {\n      layoutId: layoutId\n    }));\n    visualElement.isPresent = isPresent(presenceContext);\n    visualElement.isPresenceRoot = !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);\n    /**\n     * Fire a render to ensure the latest state is reflected on-screen.\n     */\n\n    if (!visualElement.isStatic) visualElement.syncRender();\n  });\n  /**\n   * Don't fire unnecessary effects if this is a static component.\n   */\n\n  if (isStatic) return visualElement;\n  useEffect(function () {\n    var _a;\n    /**\n     * In a future refactor we can replace the features-as-components and\n     * have this loop through them all firing \"effect\" listeners\n     */\n\n\n    (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();\n  });\n  /**\n   * If this component is a child of AnimateSharedLayout, we need to snapshot the component\n   * before it's unmounted. This lives here rather than in features/layout/Measure because\n   * as a child component its unmount effect runs after this component has been unmounted.\n   */\n\n  useSnapshotOnUnmount(visualElement);\n  return visualElement;\n}\n\nexport { useVisualElement };","map":null,"metadata":{},"sourceType":"module"}