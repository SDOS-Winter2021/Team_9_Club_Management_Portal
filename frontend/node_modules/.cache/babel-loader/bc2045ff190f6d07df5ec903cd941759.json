{"ast":null,"code":"import _classCallCheck from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { useEffect } from \"react\";\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\n\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    _classCallCheck(this, ModalManager);\n\n    _defineProperty(this, \"modals\", void 0);\n\n    this.modals = [];\n  }\n\n  _createClass(ModalManager, [{\n    key: \"add\",\n    value: function add(modal) {\n      this.modals.push(modal);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      this.modals = this.modals.filter(function (_modal) {\n        return _modal !== modal;\n      });\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      var topmostModal = this.modals[this.modals.length - 1];\n      return topmostModal === modal;\n    }\n  }]);\n\n  return ModalManager;\n}();\n\nexport var manager = new ModalManager();\nexport function useModalManager(ref, isOpen) {\n  useEffect(function () {\n    if (isOpen) {\n      manager.add(ref);\n    }\n\n    return function () {\n      manager.remove(ref);\n    };\n  }, [isOpen, ref]);\n}","map":null,"metadata":{},"sourceType":"module"}