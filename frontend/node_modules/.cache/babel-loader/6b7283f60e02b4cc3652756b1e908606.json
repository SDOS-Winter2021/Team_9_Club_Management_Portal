{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, tokenToCSSVar } from \"@chakra-ui/system\";\nimport { cx, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/docs/layout/wrap\n */\n\nexport var Wrap = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      children = props.children,\n      justify = props.justify,\n      direction = props.direction,\n      align = props.align,\n      className = props.className,\n      shouldWrapChildren = props.shouldWrapChildren,\n      rest = _objectWithoutPropertiesLoose(props, [\"spacing\", \"children\", \"justify\", \"direction\", \"align\", \"className\", \"shouldWrapChildren\"]);\n\n  var styles = React.useMemo(function () {\n    return {\n      \"--chakra-wrap-spacing\": function chakraWrapSpacing(theme) {\n        return mapResponsive(spacing, function (value) {\n          return tokenToCSSVar(\"space\", value)(theme);\n        });\n      },\n      \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: justify,\n      alignItems: align,\n      flexDirection: direction,\n      listStyleType: \"none\",\n      padding: \"0\",\n      margin: \"calc(var(--wrap-spacing) * -1)\",\n      \"& > *:not(style)\": {\n        margin: \"var(--wrap-spacing)\"\n      }\n    };\n  }, [spacing, justify, align, direction]);\n  var childrenToRender = shouldWrapChildren ? React.Children.map(children, function (child, index) {\n    return /*#__PURE__*/React.createElement(WrapItem, {\n      key: index\n    }, child);\n  }) : children;\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-wrap\", className)\n  }, rest), /*#__PURE__*/React.createElement(chakra.ul, {\n    className: \"chakra-wrap__list\",\n    __css: styles\n  }, childrenToRender));\n});\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\";\n}\n\nexport var WrapItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.li, _extends({\n    ref: ref,\n    __css: {\n      display: \"flex\",\n      alignItems: \"flex-start\"\n    },\n    className: cx(\"chakra-wrap__listitem\", className)\n  }, rest));\n});\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\";\n}","map":null,"metadata":{},"sourceType":"module"}