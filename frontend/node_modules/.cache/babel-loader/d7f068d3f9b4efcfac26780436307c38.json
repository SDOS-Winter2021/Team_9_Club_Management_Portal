{"ast":null,"code":"/**\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\nimport { addDomEvent, isBrowser } from \"./dom\";\nexport function isMouseEvent(event) {\n  // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n  if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n    return !!(event.pointerType === \"mouse\");\n  }\n\n  return event instanceof MouseEvent;\n}\nexport function isTouchEvent(event) {\n  var hasTouches = !!event.touches;\n  return hasTouches;\n}\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\n\nfunction filterPrimaryPointer(eventHandler) {\n  return function (event) {\n    var isMouseEvent = event instanceof MouseEvent;\n    var isPrimaryPointer = !isMouseEvent || isMouseEvent && event.button === 0;\n\n    if (isPrimaryPointer) {\n      eventHandler(event);\n    }\n  };\n}\n\nvar defaultPagePoint = {\n  pageX: 0,\n  pageY: 0\n};\n\nfunction pointFromTouch(e, pointType) {\n  if (pointType === void 0) {\n    pointType = \"page\";\n  }\n\n  var primaryTouch = e.touches[0] || e.changedTouches[0];\n  var point = primaryTouch || defaultPagePoint;\n  return {\n    x: point[pointType + \"X\"],\n    y: point[pointType + \"Y\"]\n  };\n}\n\nfunction pointFromMouse(point, pointType) {\n  if (pointType === void 0) {\n    pointType = \"page\";\n  }\n\n  return {\n    x: point[pointType + \"X\"],\n    y: point[pointType + \"Y\"]\n  };\n}\n\nexport function extractEventInfo(event, pointType) {\n  if (pointType === void 0) {\n    pointType = \"page\";\n  }\n\n  return {\n    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)\n  };\n}\nexport function getViewportPointFromEvent(event) {\n  return extractEventInfo(event, \"client\");\n}\nexport var wrapPointerEventHandler = function wrapPointerEventHandler(handler, shouldFilterPrimaryPointer) {\n  if (shouldFilterPrimaryPointer === void 0) {\n    shouldFilterPrimaryPointer = false;\n  }\n\n  var listener = function listener(event) {\n    return handler(event, extractEventInfo(event));\n  };\n\n  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;\n}; // We check for event support via functions in case they've been mocked by a testing suite.\n\nvar supportsPointerEvents = function supportsPointerEvents() {\n  return isBrowser && window.onpointerdown === null;\n};\n\nvar supportsTouchEvents = function supportsTouchEvents() {\n  return isBrowser && window.ontouchstart === null;\n};\n\nvar supportsMouseEvents = function supportsMouseEvents() {\n  return isBrowser && window.onmousedown === null;\n};\n\nvar mouseEventNames = {\n  pointerdown: \"mousedown\",\n  pointermove: \"mousemove\",\n  pointerup: \"mouseup\",\n  pointercancel: \"mousecancel\",\n  pointerover: \"mouseover\",\n  pointerout: \"mouseout\",\n  pointerenter: \"mouseenter\",\n  pointerleave: \"mouseleave\"\n};\nvar touchEventNames = {\n  pointerdown: \"touchstart\",\n  pointermove: \"touchmove\",\n  pointerup: \"touchend\",\n  pointercancel: \"touchcancel\"\n};\nexport function getPointerEventName(name) {\n  if (supportsPointerEvents()) {\n    return name;\n  }\n\n  if (supportsTouchEvents()) {\n    return touchEventNames[name];\n  }\n\n  if (supportsMouseEvents()) {\n    return mouseEventNames[name];\n  }\n\n  return name;\n}\nexport function addPointerEvent(target, eventName, handler, options) {\n  return addDomEvent(target, getPointerEventName(eventName), wrapPointerEventHandler(handler, eventName === \"pointerdown\"), options);\n}\nexport function isMultiTouchEvent(event) {\n  return isTouchEvent(event) && event.touches.length > 1;\n}","map":{"version":3,"sources":["../../src/pointer-event.ts"],"names":["event","hasTouches","isMouseEvent","isPrimaryPointer","eventHandler","defaultPagePoint","pageX","pageY","pointType","primaryTouch","e","point","x","y","isTouchEvent","pointFromTouch","pointFromMouse","extractEventInfo","wrapPointerEventHandler","shouldFilterPrimaryPointer","listener","handler","filterPrimaryPointer","supportsPointerEvents","isBrowser","window","supportsTouchEvents","supportsMouseEvents","mouseEventNames","pointerdown","pointermove","pointerup","pointercancel","pointerover","pointerout","pointerenter","pointerleave","touchEventNames","addDomEvent","getPointerEventName","eventName"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAA,WAAA,EAAA,SAAA,QAAA,OAAA;AAKA,OAAO,SAAA,YAAA,CAAA,KAAA,EAA6D;AAClE;AACA,MAAI,OAAA,YAAA,KAAA,WAAA,IAAuCA,KAAK,YAAhD,YAAA,EAA0E;AACxE,WAAO,CAAC,EAAEA,KAAK,CAALA,WAAAA,KAAV,OAAQ,CAAR;AACD;;AAED,SAAOA,KAAK,YAAZ,UAAA;AACD;AAED,OAAO,SAAA,YAAA,CAAA,KAAA,EAA6D;AAClE,MAAMC,UAAU,GAAG,CAAC,CAAED,KAAD,CAArB,OAAA;AACA,SAAA,UAAA;AACD;AAaD;AACA;AACA;AACA;;AACA,SAAA,oBAAA,CAAA,YAAA,EAA0E;AACxE,SAAQA,UAAAA,KAAD,EAAkB;AACvB,QAAME,YAAY,GAAGF,KAAK,YAA1B,UAAA;AACA,QAAMG,gBAAgB,GACpB,CAAA,YAAA,IAAkBD,YAAY,IAAKF,KAAD,CAAA,MAACA,KADrC,CAAA;;AAEA,QAAA,gBAAA,EAAsB;AACpBI,MAAAA,YAAY,CAAZA,KAAY,CAAZA;AACD;AANH,GAAA;AAQD;;AAID,IAAMC,gBAAgB,GAAG;AAAEC,EAAAA,KAAK,EAAP,CAAA;AAAYC,EAAAA,KAAK,EAAE;AAAnB,CAAzB;;AAEA,SAAA,cAAA,CAAA,CAAA,EAAA,SAAA,EAAsE;AAAA,MAA/BC,SAA+B,KAAA,KAAA,CAAA,EAAA;AAA/BA,IAAAA,SAA+B,GAAR,MAAvBA;AAA+B;;AACpE,MAAMC,YAAY,GAAGC,CAAC,CAADA,OAAAA,CAAAA,CAAAA,KAAgBA,CAAC,CAADA,cAAAA,CAArC,CAAqCA,CAArC;AACA,MAAMC,KAAK,GAAGF,YAAY,IAA1B,gBAAA;AAEA,SAAO;AACLG,IAAAA,CAAC,EAAED,KAAK,CAAIH,SAAJ,GADH,GACG,CADH;AAELK,IAAAA,CAAC,EAAEF,KAAK,CAAIH,SAAJ,GAAA,GAAA;AAFH,GAAP;AAID;;AAED,SAAA,cAAA,CAAA,KAAA,EAAA,SAAA,EAGE;AAAA,MADAA,SACA,KAAA,KAAA,CAAA,EAAA;AADAA,IAAAA,SACA,GADuB,MAAvBA;AACA;;AACA,SAAO;AACLI,IAAAA,CAAC,EAAED,KAAK,CAAIH,SAAJ,GADH,GACG,CADH;AAELK,IAAAA,CAAC,EAAEF,KAAK,CAAIH,SAAJ,GAAA,GAAA;AAFH,GAAP;AAID;;AAED,OAAO,SAAA,gBAAA,CAAA,KAAA,EAAA,SAAA,EAGM;AAAA,MADXA,SACW,KAAA,KAAA,CAAA,EAAA;AADXA,IAAAA,SACW,GADY,MAAvBA;AACW;;AACX,SAAO;AACLG,IAAAA,KAAK,EAAEG,YAAY,CAAZA,KAAY,CAAZA,GACHC,cAAc,CAAA,KAAA,EADXD,SACW,CADXA,GAEHE,cAAc,CAAA,KAAA,EAAA,SAAA;AAHb,GAAP;AAKD;AAED,OAAO,SAAA,yBAAA,CAAA,KAAA,EAAqD;AAC1D,SAAOC,gBAAgB,CAAA,KAAA,EAAvB,QAAuB,CAAvB;AACD;AAED,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,OAAA,EAAA,0BAAA,EAGnB;AAAA,MADlBC,0BACkB,KAAA,KAAA,CAAA,EAAA;AADlBA,IAAAA,0BACkB,GADW,KAA7BA;AACkB;;AAClB,MAAMC,QAAuB,GAAIpB,SAA3BoB,QAA2BpB,CAAAA,KAAD;AAAA,WAC9BqB,OAAO,CAAA,KAAA,EAAQJ,gBAAgB,CADjC,KACiC,CAAxB,CADuB;AAAA,GAAhC;;AAGA,SAAOE,0BAA0B,GAAGG,oBAAoB,CAAvB,QAAuB,CAAvB,GAAjC,QAAA;AAPK,CAAA,C,CAUP;;AACA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAMC,SAAS,IAAIC,MAAM,CAANA,aAAAA,KAAjD,IAA8B;AAAA,CAA9B;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAMF,SAAS,IAAIC,MAAM,CAANA,YAAAA,KAA/C,IAA4B;AAAA,CAA5B;;AACA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAMH,SAAS,IAAIC,MAAM,CAANA,WAAAA,KAA/C,IAA4B;AAAA,CAA5B;;AAaA,IAAMG,eAA+B,GAAG;AACtCC,EAAAA,WAAW,EAD2B,WAAA;AAEtCC,EAAAA,WAAW,EAF2B,WAAA;AAGtCC,EAAAA,SAAS,EAH6B,SAAA;AAItCC,EAAAA,aAAa,EAJyB,aAAA;AAKtCC,EAAAA,WAAW,EAL2B,WAAA;AAMtCC,EAAAA,UAAU,EAN4B,UAAA;AAOtCC,EAAAA,YAAY,EAP0B,YAAA;AAQtCC,EAAAA,YAAY,EAAE;AARwB,CAAxC;AAWA,IAAMC,eAA+B,GAAG;AACtCR,EAAAA,WAAW,EAD2B,YAAA;AAEtCC,EAAAA,WAAW,EAF2B,WAAA;AAGtCC,EAAAA,SAAS,EAH6B,UAAA;AAItCC,EAAAA,aAAa,EAAE;AAJuB,CAAxC;AAOA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAmD;AACxD,MAAIT,qBAAJ,EAAA,EAA6B;AAC3B,WAAA,IAAA;AACD;;AACD,MAAIG,mBAAJ,EAAA,EAA2B;AACzB,WAAOW,eAAe,CAAtB,IAAsB,CAAtB;AACD;;AACD,MAAIV,mBAAJ,EAAA,EAA2B;AACzB,WAAOC,eAAe,CAAtB,IAAsB,CAAtB;AACD;;AAED,SAAA,IAAA;AACD;AAED,OAAO,SAAA,eAAA,CAAA,MAAA,EAAA,SAAA,EAAA,OAAA,EAAA,OAAA,EAKL;AACA,SAAOU,WAAW,CAAA,MAAA,EAEhBC,mBAAmB,CAFH,SAEG,CAFH,EAGhBrB,uBAAuB,CAAA,OAAA,EAAUsB,SAAS,KAH1B,aAGO,CAHP,EAAlB,OAAkB,CAAlB;AAMD;AAED,OAAO,SAAA,iBAAA,CAAA,KAAA,EAA6C;AAClD,SAAO1B,YAAY,CAAZA,KAAY,CAAZA,IAAuBd,KAAK,CAALA,OAAAA,CAAAA,MAAAA,GAA9B,CAAA;AACD","sourcesContent":["/**\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport { addDomEvent, isBrowser } from \"./dom\"\n\ntype EventType = MouseEvent | TouchEvent | PointerEvent\ntype PointType = \"page\" | \"client\"\n\nexport function isMouseEvent(event: EventType): event is MouseEvent {\n  // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n  if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n    return !!(event.pointerType === \"mouse\")\n  }\n\n  return event instanceof MouseEvent\n}\n\nexport function isTouchEvent(event: EventType): event is TouchEvent {\n  const hasTouches = !!(event as TouchEvent).touches\n  return hasTouches\n}\n\nexport interface Point2D {\n  x: number\n  y: number\n}\n\nexport interface EventInfo {\n  point: Point2D\n}\n\nexport type EventHandler = (event: EventType, info: EventInfo) => void\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler: EventListener): EventListener {\n  return (event: Event) => {\n    const isMouseEvent = event instanceof MouseEvent\n    const isPrimaryPointer =\n      !isMouseEvent || (isMouseEvent && (event as MouseEvent).button === 0)\n    if (isPrimaryPointer) {\n      eventHandler(event)\n    }\n  }\n}\n\nexport type EventListenerWithPointInfo = (e: EventType, info: EventInfo) => void\n\nconst defaultPagePoint = { pageX: 0, pageY: 0 }\n\nfunction pointFromTouch(e: TouchEvent, pointType: PointType = \"page\") {\n  const primaryTouch = e.touches[0] || e.changedTouches[0]\n  const point = primaryTouch || defaultPagePoint\n\n  return {\n    x: point[`${pointType}X`],\n    y: point[`${pointType}Y`],\n  }\n}\n\nfunction pointFromMouse(\n  point: MouseEvent | PointerEvent,\n  pointType: PointType = \"page\",\n) {\n  return {\n    x: point[`${pointType}X`],\n    y: point[`${pointType}Y`],\n  }\n}\n\nexport function extractEventInfo(\n  event: EventType,\n  pointType: PointType = \"page\",\n): EventInfo {\n  return {\n    point: isTouchEvent(event)\n      ? pointFromTouch(event, pointType)\n      : pointFromMouse(event, pointType),\n  }\n}\n\nexport function getViewportPointFromEvent(event: EventType) {\n  return extractEventInfo(event, \"client\")\n}\n\nexport const wrapPointerEventHandler = (\n  handler: EventListenerWithPointInfo,\n  shouldFilterPrimaryPointer = false,\n): EventListener => {\n  const listener: EventListener = (event: any) =>\n    handler(event, extractEventInfo(event))\n\n  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener\n}\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nconst supportsPointerEvents = () => isBrowser && window.onpointerdown === null\nconst supportsTouchEvents = () => isBrowser && window.ontouchstart === null\nconst supportsMouseEvents = () => isBrowser && window.onmousedown === null\n\ninterface PointerNameMap {\n  pointerdown: string\n  pointermove: string\n  pointerup: string\n  pointercancel: string\n  pointerover?: string\n  pointerout?: string\n  pointerenter?: string\n  pointerleave?: string\n}\n\nconst mouseEventNames: PointerNameMap = {\n  pointerdown: \"mousedown\",\n  pointermove: \"mousemove\",\n  pointerup: \"mouseup\",\n  pointercancel: \"mousecancel\",\n  pointerover: \"mouseover\",\n  pointerout: \"mouseout\",\n  pointerenter: \"mouseenter\",\n  pointerleave: \"mouseleave\",\n}\n\nconst touchEventNames: PointerNameMap = {\n  pointerdown: \"touchstart\",\n  pointermove: \"touchmove\",\n  pointerup: \"touchend\",\n  pointercancel: \"touchcancel\",\n}\n\nexport function getPointerEventName(name: string): string {\n  if (supportsPointerEvents()) {\n    return name\n  }\n  if (supportsTouchEvents()) {\n    return touchEventNames[name]\n  }\n  if (supportsMouseEvents()) {\n    return mouseEventNames[name]\n  }\n\n  return name\n}\n\nexport function addPointerEvent(\n  target: EventTarget,\n  eventName: string,\n  handler: EventListenerWithPointInfo,\n  options?: AddEventListenerOptions,\n) {\n  return addDomEvent(\n    target,\n    getPointerEventName(eventName),\n    wrapPointerEventHandler(handler, eventName === \"pointerdown\"),\n    options,\n  )\n}\n\nexport function isMultiTouchEvent(event: EventType) {\n  return isTouchEvent(event) && event.touches.length > 1\n}\n"]},"metadata":{},"sourceType":"module"}