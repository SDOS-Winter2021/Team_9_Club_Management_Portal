{"ast":null,"code":"import _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { useBoolean, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, mergeRefs, minSafeInteger, normalizeEventKey, pick } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n\nvar sanitize = function sanitize(value) {\n  return value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n};\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$focusInputOnCh = _props.focusInputOnChange,\n      focusInputOnChange = _props$focusInputOnCh === void 0 ? true : _props$focusInputOnCh,\n      _props$clampValueOnBl = _props.clampValueOnBlur,\n      clampValueOnBlur = _props$clampValueOnBl === void 0 ? true : _props$clampValueOnBl,\n      _props$keepWithinRang = _props.keepWithinRange,\n      keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang,\n      _props$min = _props.min,\n      min = _props$min === void 0 ? minSafeInteger : _props$min,\n      _props$max = _props.max,\n      max = _props$max === void 0 ? maxSafeInteger : _props$max,\n      _props$step = _props.step,\n      stepProp = _props$step === void 0 ? 1 : _props$step,\n      isReadOnly = _props.isReadOnly,\n      isDisabled = _props.isDisabled,\n      getAriaValueText = _props.getAriaValueText,\n      _props$pattern = _props.pattern,\n      pattern = _props$pattern === void 0 ? \"[0-9]*(.[0-9]+)?\" : _props$pattern,\n      _props$inputMode = _props.inputMode,\n      inputMode = _props$inputMode === void 0 ? \"decimal\" : _props$inputMode,\n      allowMouseWheel = _props.allowMouseWheel,\n      name = _props.name,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\"]);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n\n  var counter = useCounter(props);\n  var updateFn = counter.update,\n      incrementFn = counter.increment,\n      decrementFn = counter.decrement;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isFocused = _useBoolean2[0],\n      setFocused = _useBoolean2[1];\n\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value !== counter.value;\n\n    if (notInSync) {\n      counter.update(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(function (event) {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(function (event) {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: function ArrowUp() {\n        return increment(stepFactor);\n      },\n      ArrowDown: function ArrowDown() {\n        return decrement(stepFactor);\n      },\n      Home: function Home() {\n        return updateFn(min);\n      },\n      End: function End() {\n        return updateFn(max);\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = function getStepFactor(event) {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var _getAriaValueText = function _getAriaValueText() {\n    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  };\n\n  var ariaValueText = _getAriaValueText();\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n\n  var validateAndClamp = React.useCallback(function () {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onBlur = React.useCallback(function () {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(function () {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", function (event) {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current);\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var controlProps = useFormControl(props);\n  var inputProps = pick(controlProps, [\"id\", \"disabled\", \"readOnly\", \"required\", \"aria-invalid\", \"aria-required\", \"aria-readonly\", \"aria-describedby\", \"onFocus\", \"onBlur\"]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      name: name,\n      inputMode: inputMode,\n      type: \"text\",\n      pattern: pattern\n    }, props, inputProps, {\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": inputProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(inputProps[\"aria-invalid\"] || counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(inputProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(inputProps.onBlur, onBlur)\n    });\n  }, [name, inputProps, counter.value, counter.valueAsNumber, counter.isOutOfRange, inputMode, pattern, min, max, ariaValueText, onChange, onKeyDown, setFocused.on, onBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused: isFocused,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    getIncrementButtonProps: getIncrementButtonProps,\n    getDecrementButtonProps: getDecrementButtonProps,\n    getInputProps: getInputProps,\n    htmlProps: htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-number-input.ts"],"names":["sanitize","value","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","pattern","inputMode","name","counter","useCounter","update","increment","decrement","decrementFn","useBoolean","inputRef","React","useSafeLayoutEffect","notInSync","isInteractive","isReadOnly","incrementFn","spinner","useSpinner","onChange","event","updateFn","onKeyDown","isValidNumericKeyboardEvent","stepFactor","getStepFactor","eventKey","normalizeEventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","_getAriaValueText","text","getAriaValueText","isNull","defaultText","ariaValueText","validateAndClamp","next","onBlur","setFocused","focusInput","focus","nextTick","spinUp","spinDown","pointerDown","isBrowser","document","useEventListener","isInputFocused","direction","Math","getIncrementButtonProps","ref","disabled","isDisabled","role","tabIndex","callAllHandlers","onMouseUp","onMouseLeave","onTouchEnd","ariaAttr","getDecrementButtonProps","controlProps","useFormControl","inputProps","pick","getInputProps","type","mergeRefs","Number","autoComplete","autoCorrect","onFocus","valueAsNumber","isFocused","htmlProps"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  useBoolean,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  mergeRefs,\n  minSafeInteger,\n  normalizeEventKey,\n  pick,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    /**\n     * These props are destructured to ensure `htmlProps` resolves to the correct type\n     */\n    onChange: onChangeProp,\n    precision,\n    name,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value !== counter.value\n    if (notInSync) {\n      counter.update(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const _getAriaValueText = () => {\n    const text = getAriaValueText?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }\n\n  const ariaValueText = _getAriaValueText()\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const controlProps = useFormControl<HTMLInputElement>(props)\n  const inputProps = pick(controlProps, [\n    \"id\",\n    \"disabled\",\n    \"readOnly\",\n    \"required\",\n    \"aria-invalid\",\n    \"aria-required\",\n    \"aria-readonly\",\n    \"aria-describedby\",\n    \"onFocus\",\n    \"onBlur\",\n  ])\n\n  const getInputProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      ...props,\n      ...inputProps,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": inputProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(\n        inputProps[\"aria-invalid\"] || counter.isOutOfRange,\n      ),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(inputProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(inputProps.onBlur, onBlur),\n    }),\n    [\n      name,\n      inputProps,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      inputMode,\n      pattern,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n      onBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}