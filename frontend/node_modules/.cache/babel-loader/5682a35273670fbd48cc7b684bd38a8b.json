{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { filterUndefined } from \"@chakra-ui/utils\";\nimport { createPopper } from \"@popperjs/core\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport * as popperModifiers from \"./modifiers\";\nimport { getEventListenerOptions } from \"./utils\";\nvar defaultProps = {\n  placement: \"bottom\",\n  strategy: \"absolute\",\n  flip: true,\n  gutter: 8,\n  arrowPadding: 8,\n  preventOverflow: true,\n  eventListeners: true,\n  modifiers: [],\n  boundary: \"clippingParents\"\n};\nexport function usePopper(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var opts = Object.assign({}, defaultProps, filterUndefined(props));\n  var _opts$modifiers = opts.modifiers,\n      modifiers = _opts$modifiers === void 0 ? [] : _opts$modifiers,\n      placementProp = opts.placement,\n      strategy = opts.strategy,\n      arrowPadding = opts.arrowPadding,\n      eventListeners = opts.eventListeners,\n      offset = opts.offset,\n      gutter = opts.gutter,\n      flip = opts.flip,\n      boundary = opts.boundary,\n      preventOverflow = opts.preventOverflow,\n      matchWidth = opts.matchWidth;\n  var reference = useRef(null);\n  var popper = useRef(null);\n  var instanceRef = useRef(null);\n  var cleanup = useRef(function () {});\n  var setupPopper = useCallback(function () {\n    if (!reference.current || !popper.current) return;\n    cleanup.current == null ? void 0 : cleanup.current();\n    instanceRef.current = createPopper(reference.current, popper.current, {\n      placement: placementProp,\n      modifiers: modifiers.concat([popperModifiers.innerArrow, popperModifiers.positionArrow, popperModifiers.transformOrigin, _extends({}, popperModifiers.matchWidth, {\n        enabled: !!matchWidth\n      }), _extends({\n        name: \"eventListeners\"\n      }, getEventListenerOptions(eventListeners)), {\n        name: \"arrow\",\n        options: {\n          padding: arrowPadding\n        }\n      }, {\n        name: \"offset\",\n        options: {\n          offset: offset != null ? offset : [0, gutter]\n        }\n      }, {\n        name: \"flip\",\n        enabled: !!flip,\n        options: {\n          padding: 8\n        }\n      }, {\n        name: \"preventOverflow\",\n        enabled: !!preventOverflow,\n        options: {\n          boundary: boundary\n        }\n      }]),\n      strategy: strategy\n    }); // force update one-time to fix any positioning issues\n\n    instanceRef.current.forceUpdate();\n    cleanup.current = instanceRef.current.destroy;\n  }, [placementProp, modifiers, matchWidth, eventListeners, arrowPadding, offset, gutter, flip, preventOverflow, boundary, strategy]);\n  useEffect(function () {\n    return function () {\n      var _instanceRef$current;\n\n      (_instanceRef$current = instanceRef.current) == null ? void 0 : _instanceRef$current.destroy();\n      instanceRef.current = null;\n    };\n  }, []);\n  return useMemo(function () {\n    var _instanceRef$current2, _instanceRef$current3;\n\n    return {\n      update: (_instanceRef$current2 = instanceRef.current) == null ? void 0 : _instanceRef$current2.update,\n      forceUpdate: (_instanceRef$current3 = instanceRef.current) == null ? void 0 : _instanceRef$current3.forceUpdate,\n      referenceRef: function referenceRef(node) {\n        reference.current = node;\n        setupPopper();\n      },\n      popperRef: function popperRef(node) {\n        popper.current = node;\n        setupPopper();\n      }\n    };\n  }, [setupPopper]);\n}","map":null,"metadata":{},"sourceType":"module"}