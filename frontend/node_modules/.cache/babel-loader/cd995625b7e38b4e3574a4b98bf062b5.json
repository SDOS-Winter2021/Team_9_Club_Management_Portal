{"ast":null,"code":"import _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { createContext, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeContext, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport * as React from \"react\";\nexport var ThemeProvider = function ThemeProvider(props) {\n  var _props$cssVarsRoot = props.cssVarsRoot,\n      cssVarsRoot = _props$cssVarsRoot === void 0 ? \":root\" : _props$cssVarsRoot,\n      theme = props.theme,\n      children = props.children;\n  var computedTheme = React.useMemo(function () {\n    return toCSSVar(theme);\n  }, [theme]);\n  return /*#__PURE__*/React.createElement(EmotionThemeProvider, {\n    theme: computedTheme\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      return {\n        [cssVarsRoot]: theme.__cssVars\n      };\n    }\n  }), children);\n};\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\");\n  }\n\n  return theme;\n}\n\nvar _createContext = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    StylesProvider = _createContext2[0],\n    useStyles = _createContext2[1];\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\n\nexport { StylesProvider, useStyles };\nexport var GlobalStyle = function GlobalStyle() {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme: theme,\n        colorMode: colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/providers.tsx"],"names":["memoizedGet","ThemeProvider","props","cssVarsRoot","children","computedTheme","React","toCSSVar","theme","__cssVars","Error","createContext","name","errorMessage","GlobalStyle","colorMode","useColorMode","styleObjectOrFn","get","globalStyles","runIfFn","styles","css"],"mappings":";AAAA,SAAA,YAAA,QAAA,uBAAA;AACA,SAAA,GAAA,EAAA,QAAA,QAAA,0BAAA;AAMA,SAAA,aAAA,EAGEA,WAAW,IAHb,GAAA,EAAA,OAAA,QAAA,kBAAA;AAMA,SAAA,MAAA,EAAA,YAAA,EAIEC,aAAa,IAJf,oBAAA,QAAA,gBAAA;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;AAUA,OAAO,IAAMA,aAAa,GAAIC,SAAjBD,aAAiBC,CAAAA,KAAD,EAA+B;AAAA,2BAC1D,KAD0D,CAClDC,WADkD;AAAA,MAClDA,WADkD,mCACpD,OADoD;AAAA,MACpD,KADoD,GAC1D,KAD0D,CACpD,KADoD;AAAA,MACpBC,QADoB,GAC1D,KAD0D,CACpBA,QADoB;AAE1D,MAAMC,aAAa,GAAGC,KAAK,CAALA,OAAAA,CAAc;AAAA,WAAMC,QAAQ,CAA5BD,KAA4B,CAAd;AAAA,GAAdA,EAAqC,CAA3D,KAA2D,CAArCA,CAAtB;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;AAAsB,IAAA,KAAK,EAAED;AAA7B,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,MAAM,EAAGG,gBAAAA,KAAD;AAAA,aAAiB;AAAE,SAAA,WAAA,GAAeA,KAAK,CAACC;AAAvB,OAAjB;AAAA;AAAhB,GAAA,CADF,EADF,QACE,CADF;AAHK,CAAA;AAWP,OAAO,SAAA,QAAA,GAA6C;AAClD,MAAMD,KAAK,GAAGF,KAAK,CAALA,UAAAA,CAAd,YAAcA,CAAd;;AAGA,MAAI,CAAJ,KAAA,EAAY;AACV,UAAMI,KAAK,CAAX,kHAAW,CAAX;AAGD;;AAED,SAAA,KAAA;AACD;;qBAE0CC,aAAa,CAEtD;AACAC,EAAAA,IAAI,EADJ,eAAA;AAEAC,EAAAA,YAAY,EACV;AAHF,CAFsD,C;;IAA3C,c;IAAA,S;AAQb;AACA;AACA;AACA;;;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,sBACTE,YAAtB,EAD+B;AAAA,MACvBD,SADuB,iBACvBA,SADuB;;AAE/B,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,MAAM,EAAGP,gBAAAA,KAAD,EAAgB;AACtB,UAAMS,eAAe,GAAGC,GAAG,CAAA,KAAA,EAA3B,eAA2B,CAA3B;AACA,UAAMC,YAAY,GAAGC,OAAO,CAAA,eAAA,EAAkB;AAAEZ,QAAAA,KAAF,EAAEA,KAAF;AAASO,QAAAA,SAAAA,EAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAAJ,YAAA,EAAmB,OAAA,SAAA;AACnB,UAAMM,MAAM,GAAGC,GAAG,CAAHA,YAAG,CAAHA,CAAf,KAAeA,CAAf;AACA,aAAA,MAAA;AACD;AAPH,GAAA,CADF;AAFK,CAAA","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport {\n  css,\n  SystemStyleObject,\n  toCSSVar,\n  WithCSSVar,\n} from \"@chakra-ui/styled-system\"\nimport {\n  createContext,\n  Dict,\n  memoizedGet as get,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeContext,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":root\"\n   */\n  cssVarsRoot?: string\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { cssVarsRoot = \":root\", theme, children } = props\n  const computedTheme = React.useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <Global styles={(theme: any) => ({ [cssVarsRoot]: theme.__cssVars })} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n\nexport const [StylesProvider, useStyles] = createContext<\n  Dict<SystemStyleObject>\n>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}