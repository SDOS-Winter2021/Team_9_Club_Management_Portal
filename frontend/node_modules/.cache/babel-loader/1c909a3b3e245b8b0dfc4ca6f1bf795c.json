{"ast":null,"code":"import _slicedToArray from \"D:\\\\Team_9_Club_Management_Portal\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useBoolean, useDisclosure, useFocusOnPointerDown, useFocusOnHide, useFocusOnShow, useIds } from \"@chakra-ui/hooks\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\";\nimport { callAllHandlers, contains, getOwnerDocument, getRelatedTarget, isBrowser, mergeRefs, px } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nexport function usePopover(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$closeOnBlur = _props.closeOnBlur,\n      closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n      _props$closeOnEsc = _props.closeOnEsc,\n      closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n      initialFocusRef = _props.initialFocusRef,\n      placementProp = _props.placement,\n      flip = _props.flip,\n      gutter = _props.gutter,\n      id = _props.id,\n      arrowSize = _props.arrowSize,\n      _props$returnFocusOnC = _props.returnFocusOnClose,\n      returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC,\n      _props$autoFocus = _props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,\n      arrowShadowColorProp = _props.arrowShadowColor,\n      modifiers = _props.modifiers,\n      _props$trigger = _props.trigger,\n      trigger = _props$trigger === void 0 ? TRIGGER.click : _props$trigger,\n      _props$openDelay = _props.openDelay,\n      openDelay = _props$openDelay === void 0 ? 200 : _props$openDelay,\n      _props$closeDelay = _props.closeDelay,\n      closeDelay = _props$closeDelay === void 0 ? 200 : _props$closeDelay,\n      isLazy = _props.isLazy;\n\n  var _useDisclosure = useDisclosure(props),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onOpen = _useDisclosure.onOpen,\n      onToggle = _useDisclosure.onToggle;\n\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      hasHeader = _useBoolean2[0],\n      setHasHeader = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      hasBody = _useBoolean4[0],\n      setHasBody = _useBoolean4[1];\n\n  var _useIds = useIds(id, \"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"),\n      _useIds2 = _slicedToArray(_useIds, 4),\n      triggerId = _useIds2[0],\n      popoverId = _useIds2[1],\n      headerId = _useIds2[2],\n      bodyId = _useIds2[3];\n\n  var fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\");\n  var shadowColor = arrowShadowColorProp != null ? arrowShadowColorProp : fallbackShadowColor;\n  var arrowShadowColor = useToken(\"colors\", shadowColor, arrowShadowColorProp);\n  var popper = usePopper({\n    placement: placementProp,\n    flip: flip,\n    gutter: gutter,\n    modifiers: modifiers\n  });\n  useFocusOnPointerDown({\n    doc: isBrowser ? getOwnerDocument(triggerRef.current) : null,\n    elements: [triggerRef]\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  var getPopoverProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var popoverProps = _extends({}, props, {\n      style: _extends({}, props.style, {\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      }),\n      ref: mergeRefs(popoverRef, _ref),\n      children: !isLazy || isOpen ? props.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props.onKeyDown, function (event) {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props.onBlur, function (event) {\n        var relatedTarget = getRelatedTarget(event);\n        var targetIsPopover = contains(popoverRef.current, relatedTarget);\n        var targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        var isValidBlur = !targetIsPopover && !targetIsTrigger;\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : undefined,\n      \"aria-describedby\": hasBody ? bodyId : undefined\n    });\n\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, function () {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, function () {\n        isHoveringRef.current = false;\n        setTimeout(onClose, closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [isLazy, isOpen, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, closeDelay, closeOnBlur]);\n  var getPopoverPositionerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(popper.popperRef, _ref),\n      style: _extends({}, props.style, {\n        [popperCSSVars.arrowSize.var]: arrowSize ? px(arrowSize) : undefined,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        visibility: isOpen ? \"visible\" : \"hidden\"\n      })\n    });\n  }, [arrowShadowColor, arrowSize, isOpen, popper.popperRef]);\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var getTriggerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(triggerRef, _ref, popper.referenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER.hover) {\n      /**\n       * Any content that shows on pointer hover should also show on keyboard focus.\n       * Consider focus and blur to be the `hover` for keyboard users.\n       *\n       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n       */\n      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);\n      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);\n      /**\n       * Any content that shows on hover or focus must be dismissible.\n       * This case pressing `Escape` will dismiss the popover\n       */\n\n      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, function (event) {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, function () {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, function () {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = undefined;\n        }\n\n        closeTimeout.current = window.setTimeout(function () {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, popper.referenceRef, onToggle, onOpen, onClose, openDelay, closeDelay]);\n  useEffect(function () {\n    return function () {\n      if (openTimeout.current) clearTimeout(openTimeout.current);\n      if (closeTimeout.current) clearTimeout(closeTimeout.current);\n    };\n  }, []);\n\n  var onTransitionEnd = function onTransitionEnd() {\n    var _popoverRef$current;\n\n    (_popoverRef$current = popoverRef.current) == null ? void 0 : _popoverRef$current.dispatchEvent(new Event(\"transitionend\"));\n  };\n\n  return {\n    forceUpdate: popper.forceUpdate,\n    isOpen: isOpen,\n    onClose: onClose,\n    headerId: headerId,\n    hasHeader: hasHeader,\n    setHasHeader: setHasHeader,\n    bodyId: bodyId,\n    hasBody: hasBody,\n    setHasBody: setHasBody,\n    onTransitionEnd: onTransitionEnd,\n    getPopoverPositionerProps: getPopoverPositionerProps,\n    getPopoverProps: getPopoverProps,\n    getTriggerProps: getTriggerProps\n  };\n}","map":null,"metadata":{},"sourceType":"module"}