{"ast":null,"code":"import { Presence } from './types.js';\nimport { createContext } from 'react';\n/**\n * Default handlers for batching VisualElements\n */\n\nvar defaultHandler = {\n  measureLayout: function measureLayout(child) {\n    return child.updateLayoutMeasurement();\n  },\n  layoutReady: function layoutReady(child) {\n    return child.notifyLayoutReady();\n  }\n};\n/**\n * Create a batcher to process VisualElements\n */\n\nfunction createBatcher() {\n  var queue = new Set();\n  return {\n    add: function add(child) {\n      return queue.add(child);\n    },\n    flush: function flush(_a) {\n      var _b = _a === void 0 ? defaultHandler : _a,\n          measureLayout = _b.measureLayout,\n          layoutReady = _b.layoutReady,\n          parent = _b.parent;\n\n      var order = Array.from(queue).sort(function (a, b) {\n        return a.depth - b.depth;\n      });\n\n      var resetAndMeasure = function resetAndMeasure() {\n        /**\n         * Write: Reset any transforms on children elements so we can read their actual layout\n         */\n        order.forEach(function (child) {\n          return child.resetTransform();\n        });\n        /**\n         * Read: Measure the actual layout\n         */\n\n        order.forEach(measureLayout);\n      };\n\n      parent ? parent.withoutTransform(resetAndMeasure) : resetAndMeasure();\n      /**\n       * Write: Notify the VisualElements they're ready for further write operations.\n       */\n\n      order.forEach(layoutReady);\n      /**\n       * After all children have started animating, ensure any Entering components are set to Present.\n       * If we add deferred animations (set up all animations and then start them in two loops) this\n       * could be moved to the start loop. But it needs to happen after all the animations configs\n       * are generated in AnimateSharedLayout as this relies on presence data\n       */\n\n      order.forEach(function (child) {\n        if (child.isPresent) child.presence = Presence.Present;\n      });\n      queue.clear();\n    }\n  };\n}\n\nfunction isSharedLayout(context) {\n  return !!context.forceUpdate;\n}\n\nvar SharedLayoutContext = createContext(createBatcher());\n/**\n * @internal\n */\n\nvar FramerTreeLayoutContext = createContext(createBatcher());\nexport { FramerTreeLayoutContext, SharedLayoutContext, createBatcher, isSharedLayout };","map":null,"metadata":{},"sourceType":"module"}