{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { filterUndefined } from \"@chakra-ui/utils\";\nimport { createPopper } from \"@popperjs/core\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport * as popperModifiers from \"./modifiers\";\nimport { getEventListenerOptions } from \"./utils\";\nvar defaultProps = {\n  placement: \"bottom\",\n  strategy: \"absolute\",\n  flip: true,\n  gutter: 8,\n  arrowPadding: 8,\n  preventOverflow: true,\n  eventListeners: true,\n  modifiers: [],\n  boundary: \"clippingParents\"\n};\nexport function usePopper(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var opts = Object.assign({}, defaultProps, filterUndefined(props));\n  var _opts$modifiers = opts.modifiers,\n      modifiers = _opts$modifiers === void 0 ? [] : _opts$modifiers,\n      placementProp = opts.placement,\n      strategy = opts.strategy,\n      arrowPadding = opts.arrowPadding,\n      eventListeners = opts.eventListeners,\n      offset = opts.offset,\n      gutter = opts.gutter,\n      flip = opts.flip,\n      boundary = opts.boundary,\n      preventOverflow = opts.preventOverflow,\n      matchWidth = opts.matchWidth;\n  var reference = useRef(null);\n  var popper = useRef(null);\n  var instanceRef = useRef(null);\n  var cleanup = useRef(function () {});\n  var setupPopper = useCallback(function () {\n    if (!reference.current || !popper.current) return;\n    cleanup.current == null ? void 0 : cleanup.current();\n    instanceRef.current = createPopper(reference.current, popper.current, {\n      placement: placementProp,\n      modifiers: modifiers.concat([popperModifiers.innerArrow, popperModifiers.positionArrow, popperModifiers.transformOrigin, _extends({}, popperModifiers.matchWidth, {\n        enabled: !!matchWidth\n      }), _extends({\n        name: \"eventListeners\"\n      }, getEventListenerOptions(eventListeners)), {\n        name: \"arrow\",\n        options: {\n          padding: arrowPadding\n        }\n      }, {\n        name: \"offset\",\n        options: {\n          offset: offset != null ? offset : [0, gutter]\n        }\n      }, {\n        name: \"flip\",\n        enabled: !!flip,\n        options: {\n          padding: 8\n        }\n      }, {\n        name: \"preventOverflow\",\n        enabled: !!preventOverflow,\n        options: {\n          boundary: boundary\n        }\n      }]),\n      strategy: strategy\n    }); // force update one-time to fix any positioning issues\n\n    instanceRef.current.forceUpdate();\n    cleanup.current = instanceRef.current.destroy;\n  }, [placementProp, modifiers, matchWidth, eventListeners, arrowPadding, offset, gutter, flip, preventOverflow, boundary, strategy]);\n  useEffect(function () {\n    return function () {\n      var _instanceRef$current;\n\n      (_instanceRef$current = instanceRef.current) == null ? void 0 : _instanceRef$current.destroy();\n      instanceRef.current = null;\n    };\n  }, []);\n  return useMemo(function () {\n    var _instanceRef$current2, _instanceRef$current3;\n\n    return {\n      update: (_instanceRef$current2 = instanceRef.current) == null ? void 0 : _instanceRef$current2.update,\n      forceUpdate: (_instanceRef$current3 = instanceRef.current) == null ? void 0 : _instanceRef$current3.forceUpdate,\n      referenceRef: function referenceRef(node) {\n        reference.current = node;\n        setupPopper();\n      },\n      popperRef: function popperRef(node) {\n        popper.current = node;\n        setupPopper();\n      }\n    };\n  }, [setupPopper]);\n}","map":{"version":3,"sources":["../../src/use-popper.ts"],"names":["defaultProps","placement","strategy","flip","gutter","arrowPadding","preventOverflow","eventListeners","modifiers","boundary","props","opts","Object","filterUndefined","matchWidth","reference","useRef","popper","instanceRef","cleanup","setupPopper","useCallback","createPopper","popperModifiers","enabled","name","getEventListenerOptions","options","padding","offset","useEffect","useMemo","update","forceUpdate","referenceRef","node","popperRef"],"mappings":"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","sourcesContent":["import { filterUndefined } from \"@chakra-ui/utils\"\nimport {\n  createPopper,\n  Instance,\n  Modifier,\n  Placement,\n  VirtualElement,\n} from \"@popperjs/core\"\nimport { useCallback, useEffect, useMemo, useRef } from \"react\"\nimport * as popperModifiers from \"./modifiers\"\nimport { getEventListenerOptions } from \"./utils\"\n\nexport type { Placement }\n\nexport interface UsePopperProps {\n  offset?: [x: number, y: number]\n  gutter?: number\n  preventOverflow?: boolean\n  flip?: boolean\n  matchWidth?: boolean\n  boundary?: \"clippingParents\" | \"scrollParent\" | HTMLElement\n  eventListeners?: boolean | { scroll?: boolean; resize?: boolean }\n  arrowPadding?: number\n  strategy?: \"absolute\" | \"fixed\"\n  placement?: Placement\n  modifiers?: Array<Partial<Modifier<string, any>>>\n}\n\nconst defaultProps: UsePopperProps = {\n  placement: \"bottom\",\n  strategy: \"absolute\",\n  flip: true,\n  gutter: 8,\n  arrowPadding: 8,\n  preventOverflow: true,\n  eventListeners: true,\n  modifiers: [],\n  boundary: \"clippingParents\",\n}\n\nexport function usePopper(props: UsePopperProps = {}) {\n  const opts = Object.assign({}, defaultProps, filterUndefined(props))\n  const {\n    modifiers = [],\n    placement: placementProp,\n    strategy,\n    arrowPadding,\n    eventListeners,\n    offset,\n    gutter,\n    flip,\n    boundary,\n    preventOverflow,\n    matchWidth,\n  } = opts\n\n  const reference = useRef<Element | VirtualElement | null>(null)\n  const popper = useRef<HTMLElement | null>(null)\n  const instanceRef = useRef<Instance | null>(null)\n\n  const cleanup = useRef(() => {})\n\n  const setupPopper = useCallback(() => {\n    if (!reference.current || !popper.current) return\n    cleanup.current?.()\n\n    instanceRef.current = createPopper(reference.current, popper.current, {\n      placement: placementProp,\n      modifiers: modifiers.concat([\n        popperModifiers.innerArrow,\n        popperModifiers.positionArrow,\n        popperModifiers.transformOrigin,\n        { ...popperModifiers.matchWidth, enabled: !!matchWidth },\n        {\n          name: \"eventListeners\",\n          ...getEventListenerOptions(eventListeners),\n        },\n        {\n          name: \"arrow\",\n          options: { padding: arrowPadding },\n        },\n        {\n          name: \"offset\",\n          options: {\n            offset: offset ?? [0, gutter],\n          },\n        },\n        {\n          name: \"flip\",\n          enabled: !!flip,\n          options: { padding: 8 },\n        },\n        {\n          name: \"preventOverflow\",\n          enabled: !!preventOverflow,\n          options: { boundary },\n        },\n      ]),\n      strategy,\n    })\n\n    // force update one-time to fix any positioning issues\n    instanceRef.current.forceUpdate()\n\n    cleanup.current = instanceRef.current.destroy\n  }, [\n    placementProp,\n    modifiers,\n    matchWidth,\n    eventListeners,\n    arrowPadding,\n    offset,\n    gutter,\n    flip,\n    preventOverflow,\n    boundary,\n    strategy,\n  ])\n\n  useEffect(() => {\n    return () => {\n      instanceRef.current?.destroy()\n      instanceRef.current = null\n    }\n  }, [])\n\n  return useMemo(\n    () => ({\n      update: instanceRef.current?.update,\n      forceUpdate: instanceRef.current?.forceUpdate,\n      referenceRef: <T extends Element | VirtualElement>(node: T | null) => {\n        reference.current = node\n        setupPopper()\n      },\n      popperRef: <T extends HTMLElement>(node: T | null) => {\n        popper.current = node\n        setupPopper()\n      },\n    }),\n    [setupPopper],\n  )\n}\n\nexport type UsePopperReturn = ReturnType<typeof usePopper>\n"]},"metadata":{},"sourceType":"module"}