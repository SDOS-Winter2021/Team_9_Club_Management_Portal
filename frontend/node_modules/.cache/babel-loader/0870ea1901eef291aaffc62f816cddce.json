{"ast":null,"code":"import * as React from \"react\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport { useCallbackRef } from \"./use-callback-ref\";\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\n\nexport function useEventListener(event, handler, env, options) {\n  if (env === void 0) {\n    env = isBrowser ? document : null;\n  }\n\n  var fn = useCallbackRef(handler);\n  React.useEffect(function () {\n    if (!env) return undefined;\n\n    var listener = function listener(event) {\n      fn(event);\n    };\n\n    env.addEventListener(event, listener, options);\n    return function () {\n      env.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, fn]);\n  return function () {\n    var _env;\n\n    (_env = env) == null ? void 0 : _env.removeEventListener(event, fn, options);\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["env","isBrowser","fn","useCallbackRef","React","listener","event"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAKL;AAAA,MAFAA,GAEA,KAAA,KAAA,CAAA,EAAA;AAFAA,IAAAA,GAEA,GAFqCC,SAAS,GAAA,QAAA,GAAc,IAA5DD;AAEA;;AACA,MAAME,EAAE,GAAGC,cAAc,CAAzB,OAAyB,CAAzB;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAI,CAAJ,GAAA,EAAU,OAAA,SAAA;;AAEV,QAAMC,QAAQ,GAAIC,SAAZD,QAAYC,CAAAA,KAAD,EAAgB;AAC/BJ,MAAAA,EAAE,CAAFA,KAAE,CAAFA;AADF,KAAA;;AAIAF,IAAAA,GAAG,CAAHA,gBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,GAAG,CAAHA,mBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AADF,KAAA;AARFI,GAAAA,EAWG,CAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAXHA,EAWG,CAXHA;AAaA,SAAO,YAAM;AAAA,QAAA,IAAA;;AACX,KAAA,IAAA,GAAA,GAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,KAAA,EAAA,EAAA,EAAA,OAAA,CAAA;AADF,GAAA;AAGD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler: (event: DocumentEventMap[K]) => void,\n  env: Document | HTMLElement | null = isBrowser ? document : null,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const fn = useCallbackRef(handler) as any\n\n  React.useEffect(() => {\n    if (!env) return undefined\n\n    const listener = (event: any) => {\n      fn(event)\n    }\n\n    env.addEventListener(event, listener, options)\n    return () => {\n      env.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, fn])\n\n  return () => {\n    env?.removeEventListener(event, fn, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}