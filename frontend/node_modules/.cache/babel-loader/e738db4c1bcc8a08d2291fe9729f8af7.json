{"ast":null,"code":"import _slicedToArray from \"D:/Team_9_Club_Management_Portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from \"react\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nexport function useMediaQuery(query) {\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!window.matchMedia(query).matches : false;\n  })),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      matches = _React$useState2[0],\n      setMatches = _React$useState2[1];\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (mediaQuery, index) {\n      var listener = function listener() {\n        return setMatches(function (prev) {\n          return prev.map(function (prevValue, idx) {\n            return index === idx ? !!mediaQuery.matches : prevValue;\n          });\n        });\n      };\n\n      mediaQuery.addListener(listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (mediaQuery, index) {\n        mediaQuery.removeListener(listenerList[index]);\n      });\n    };\n  }, [query]);\n  return matches;\n}","map":{"version":3,"sources":["../../src/use-media-query.ts"],"names":["useSafeLayoutEffect","isBrowser","React","queries","Array","isSupported","query","window","mediaQueryList","listenerList","listener","setMatches","prev","index","mediaQuery"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AAEA,IAAMA,mBAAmB,GAAGC,SAAS,GAAGC,KAAK,CAAR,eAAA,GAA2BA,KAAK,CAArE,SAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,aAAA,CAAA,KAAA,EAA4D;AACjE,MAAMC,OAAO,GAAGC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAA+B,CAA/C,KAA+C,CAA/C;AACA,MAAMC,WAAW,GAAGJ,SAAS,IAAI,gBAAjC,MAAA;;AAFiE,wBAInCC,KAAK,CAALA,QAAAA,CAC5BC,OAAO,CAAPA,GAAAA,CAAaG,UAAAA,KAAD;AAAA,WACVD,WAAW,GAAG,CAAC,CAACE,MAAM,CAANA,UAAAA,CAAAA,KAAAA,EAAL,OAAA,GAFf,KACc;AAAA,GAAZJ,CAD4BD,CAJmC;AAAA;AAAA,MAI3D,OAJ2D;AAAA,MAI3D,UAJ2D;;AAUjEF,EAAAA,mBAAmB,CAAC,YAAM;AACxB,QAAI,CAAJ,WAAA,EAAkB,OAAA,SAAA;AAElB,QAAMQ,cAAc,GAAGL,OAAO,CAAPA,GAAAA,CAAaG,UAAAA,KAAD;AAAA,aAAWC,MAAM,CAANA,UAAAA,CAA9C,KAA8CA,CAAX;AAAA,KAAZJ,CAAvB;AAEA,QAAMM,YAAY,GAAG,cAAc,CAAd,GAAA,CAAmB,UAAA,UAAA,EAAA,KAAA,EAAuB;AAC7D,UAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,eACfC,UAAU,CAAEC,UAAAA,IAAD;AAAA,iBACTA,IAAI,CAAJA,GAAAA,CAAS,UAAA,SAAA,EAAA,GAAA;AAAA,mBACPC,KAAK,KAALA,GAAAA,GAAgB,CAAC,CAACC,UAAU,CAA5BD,OAAAA,GAHN,SAEa;AAAA,WAATD,CADS;AAAA,SAAD,CADK;AAAA,OAAjB;;AAOAE,MAAAA,UAAU,CAAVA,WAAAA,CAAAA,QAAAA;AAEA,aAAA,QAAA;AAVF,KAAqB,CAArB;AAaA,WAAO,YAAM;AACXN,MAAAA,cAAc,CAAdA,OAAAA,CAAuB,UAAA,UAAA,EAAA,KAAA,EAAuB;AAC5CM,QAAAA,UAAU,CAAVA,cAAAA,CAA0BL,YAAY,CAAtCK,KAAsC,CAAtCA;AADFN,OAAAA;AADF,KAAA;AAlBiB,GAAA,EAuBhB,CAvBHR,KAuBG,CAvBgB,CAAnBA;AAyBA,SAAA,OAAA;AACD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\n\nconst useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string | string[]): boolean[] {\n  const queries = Array.isArray(query) ? query : [query]\n  const isSupported = isBrowser && \"matchMedia\" in window\n\n  const [matches, setMatches] = React.useState(\n    queries.map((query) =>\n      isSupported ? !!window.matchMedia(query).matches : false,\n    ),\n  )\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported) return undefined\n\n    const mediaQueryList = queries.map((query) => window.matchMedia(query))\n\n    const listenerList = mediaQueryList.map((mediaQuery, index) => {\n      const listener = () =>\n        setMatches((prev) =>\n          prev.map((prevValue, idx) =>\n            index === idx ? !!mediaQuery.matches : prevValue,\n          ),\n        )\n\n      mediaQuery.addListener(listener)\n\n      return listener\n    })\n\n    return () => {\n      mediaQueryList.forEach((mediaQuery, index) => {\n        mediaQuery.removeListener(listenerList[index])\n      })\n    }\n  }, [query])\n\n  return matches\n}\n"]},"metadata":{},"sourceType":"module"}